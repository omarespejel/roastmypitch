# Project Context & Goal

## Goal for the LLM
You are an expert full-stack developer and software architect with deep expertise in Python/FastAPI for backends and React/Next.js/TypeScript for frontends. Your task is to analyze the complete context of this monorepo project, which is provided below. Please review the project structure, dependencies, backend source code, frontend source code, and configuration, and then provide specific, actionable advice for improvement. Focus on code quality, best practices, potential bugs, architectural design, maintainability, and the synergy between the frontend and backend.

---

## Directory Structure
.
├── DEPLOYMENT.md
├── README.md
├── SECURITY.md
├── backend
│   ├── chroma_db
│   │   ├── 484c6b69-a1f9-47b3-b105-8215ed37cdf4
│   │   │   ├── data_level0.bin
│   │   │   ├── header.bin
│   │   │   ├── length.bin
│   │   │   └── link_lists.bin
│   │   └── chroma.sqlite3
│   ├── database_schema.sql
│   ├── health_check.py
│   ├── pyproject.toml
│   ├── requirements.txt
│   ├── src
│   │   ├── __init__.py
│   │   ├── adaptive_questioning.py
│   │   ├── analysis_engine.py
│   │   ├── main.py
│   │   └── prompts.py
│   └── uv.lock
├── env-template.md
├── env.example
├── frontend
│   ├── README.md
│   ├── app
│   │   ├── api
│   │   │   └── auth
│   │   │       └── [...nextauth]
│   │   ├── components
│   │   │   └── ui
│   │   │       ├── badge.tsx
│   │   │       ├── button.tsx
│   │   │       ├── card.tsx
│   │   │       ├── dialog.tsx
│   │   │       ├── input.tsx
│   │   │       ├── switch.tsx
│   │   │       ├── tabs.tsx
│   │   │       ├── textarea.tsx
│   │   │       ├── toast.tsx
│   │   │       └── toaster.tsx
│   │   ├── globals.css
│   │   ├── hooks
│   │   │   └── use-toast.ts
│   │   ├── layout.tsx
│   │   ├── lib
│   │   │   └── utils.ts
│   │   ├── not-found.tsx
│   │   ├── page.tsx
│   │   └── providers.tsx
│   ├── bun.lock
│   ├── components
│   │   ├── adaptive-questions.tsx
│   │   ├── agent-selector.tsx
│   │   ├── chat-interface.tsx
│   │   ├── custom-icons.tsx
│   │   ├── feedback-modal.tsx
│   │   ├── header.tsx
│   │   ├── message-input.tsx
│   │   ├── onboarding-guide.tsx
│   │   ├── progress-indicators.tsx
│   │   └── smart-suggestions.tsx
│   ├── lib
│   │   ├── supabase.ts
│   │   └── topic-analyzer.ts
│   ├── next-env.d.ts
│   ├── next.config.js
│   ├── package.json
│   ├── postcss.config.js
│   ├── public
│   ├── tailwind.config.ts
│   ├── tsconfig.json
│   ├── tsconfig.tsbuildinfo
│   └── types
│       └── next-auth.d.ts
├── generate-context.sh
├── project-context-prompt-20250731-0537.txt
└── render.yaml

18 directories, 62 files

## FILE: README.md
# Starknet Founders Bot v2

An AI-powered co-pilot for Starknet founders to get expert feedback on their pitch decks and product strategies. Features multiple AI agent personalities (VC and Product PM) with advanced analysis capabilities.

## 🚀 Features

### Core Functionality
- **PDF Pitch Deck Upload**: Secure file processing with comprehensive validation
- **Multi-Agent Chat**: Switch between "Shark VC" and "Product PM" personalities
- **Progress Tracking**: Visual indicators for pitch deck completeness
- **GitHub OAuth**: Secure authentication system

### Advanced Intelligence Features
- **Smart Suggestions**: AI-powered gap analysis with contextual help
- **Ecosystem Research**: Real-time Starknet ecosystem updates and case studies
- **Competitor Analysis**: Automated competitor identification and positioning
- **Adaptive Questioning**: Context-aware follow-up questions

## 🏗️ Architecture

```
Frontend (Next.js + TypeScript)     Backend (FastAPI + Python)
├── Smart Suggestions UI            ├── Analysis Engine
├── Ecosystem Updates               ├── Ecosystem Research
├── Competitor Analysis             ├── Competitor Analysis
├── Adaptive Questions              ├── Adaptive Questioning
└── Chat Interface                  └── Vector Store (ChromaDB)
```

## 🛠️ Tech Stack

**Frontend:**
- Next.js 14 with App Router
- TypeScript
- Tailwind CSS
- Bun (package manager)
- NextAuth.js (authentication)

**Backend:**
- FastAPI
- LlamaIndex
- ChromaDB (vector store)
- OpenRouter API (multiple LLMs)
- UV (package manager)

## 🔧 Development Setup

### Prerequisites
- Python 3.8+
- Node.js 18+
- Bun
- UV

### Environment Variables
Create a `.env` file in the project root:

```bash
# OpenRouter API key for AI features
OPENROUTER_API_KEY=your_openrouter_key_here

# GitHub OAuth (create app at github.com/settings/applications/new)
GITHUB_ID=your_github_oauth_id
GITHUB_SECRET=your_github_oauth_secret

# NextAuth configuration
NEXTAUTH_SECRET=your_random_32_character_secret
NEXTAUTH_URL=http://localhost:3000

# API URLs
NEXT_PUBLIC_API_URL=http://localhost:8000
```

### Backend Setup
```bash
cd backend
uv sync
uv run uvicorn src.main:app --reload
```

### Frontend Setup
```bash
cd frontend
bun install
bun run dev
```

## 🔒 Security Features

- **Input Validation**: Comprehensive validation on all user inputs
- **File Upload Security**: PDF validation, size limits, filename sanitization
- **Rate Limiting**: 100 requests/minute per IP
- **CORS Protection**: Dynamic origin handling for production
- **Error Handling**: No internal details exposed to clients

See [SECURITY.md](./SECURITY.md) for complete security documentation.

## 🚀 Deployment

### Quick Deploy to Render

#### Option 1: Blueprint Deployment (Recommended)
1. Import the `render.yaml` blueprint from your repository
2. Configure environment variables using [`env-template.md`](./env-template.md)
3. Deploy both services automatically

#### Option 2: Manual Deployment
1. **Backend Service**:
   - Build Command: `cd backend && pip install -r requirements.txt`
   - Start Command: `cd backend && uvicorn src.main:app --host 0.0.0.0 --port $PORT`

2. **Frontend Service**:
   - Build Command: `cd frontend && bun install && bun run build`
   - Start Command: `cd frontend && bun start`

3. **Environment Variables**: Use [`env-template.md`](./env-template.md) for setup

### Deployment Documentation
- 📋 **[DEPLOYMENT.md](./DEPLOYMENT.md)** - Complete deployment guide
- 🔧 **[env-template.md](./env-template.md)** - Environment variables template
- 🔒 **[SECURITY.md](./SECURITY.md)** - Security configurations
- ⚙️ **[render.yaml](./render.yaml)** - Render blueprint configuration

## 📡 API Endpoints

### Core Endpoints
- `POST /upload/{founder_id}` - Upload pitch deck PDF
- `POST /chat` - Chat with AI agents
- `POST /reset/{founder_id}` - Reset chat session

### Advanced Features
- `POST /analyze/{founder_id}` - Smart pitch analysis
- `GET /ecosystem-updates/{space}` - Starknet ecosystem research
- `GET /case-studies` - Success story case studies
- `POST /competitor-analysis` - Automated competitor analysis
- `POST /adaptive-questions` - Context-aware questions

## 🧪 Development

### Testing Backend
```bash
cd backend
uv run python -c "from src.analysis_engine import PitchDeckAnalyzer; print('✅ Backend working')"
```

### Testing Frontend
```bash
cd frontend
bun run build
```

### Code Quality
- TypeScript strict mode enabled
- Comprehensive error handling
- Security-first development practices

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch
3. Follow security best practices
4. Test both frontend and backend
5. Submit a pull request

## 📄 License

MIT License - see LICENSE file for details.

---

Built with ❤️ for the Starknet ecosystem

---

## FILE: backend/pyproject.toml
[project]
name = "starknet_founders_bot_v2"
version = "0.1.0"
description = "Add your description here"
authors = [
    { name = "Omar Espejel", email = "espejelomar@gmail.com" },
]
dependencies = [
    "fastapi>=0.111.0",
    "uvicorn>=0.30.1",
    "python-dotenv>=1.0.1",
    "python-multipart>=0.0.6",
    "openai>=1.35.3",
    "llama-index>=0.10.50",
    "llama-index-llms-openai>=0.1.24",
    "llama-index-vector-stores-chroma>=0.1.8",
    "chromadb>=0.5.5",
    "anthropic>=0.28.0",
    "llama-index-embeddings-huggingface>=0.2.0",
    "pypdf>=4.2.0",
    "llama-index-llms-openai-like>=0.2.0",
    "requests>=2.31.0",
    "python-socketio>=5.11.0",
]
readme = "README.md"
requires-python = ">=3.8.1"

---

## FILE: frontend/package.json
{
  "name": "starknet-founders-bot-frontend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "type-check": "tsc --noEmit",
    "clean": "rm -rf .next"
  },
  "dependencies": {
    "@next-auth/prisma-adapter": "^1.0.7",
    "@radix-ui/react-dialog": "^1.0.5",
    "@radix-ui/react-slot": "^1.0.2",
    "@radix-ui/react-switch": "^1.0.3",
    "@radix-ui/react-tabs": "^1.0.4",
    "@radix-ui/react-toast": "^1.1.5",
    "@supabase/supabase-js": "^2.53.0",
    "canvas-confetti": "^1.9.3",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.0.0",
    "lucide-react": "^0.294.0",
    "next": "14.0.0",
    "next-auth": "^4.24.5",
    "posthog-js": "^1.258.2",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "socket.io-client": "^4.8.1",
    "tailwind-merge": "^2.0.0",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@types/canvas-confetti": "^1.9.0",
    "@types/node": "^20.8.10",
    "@types/react": "^18.2.37",
    "@types/react-dom": "^18.2.15",
    "autoprefixer": "^10.4.16",
    "eslint": "^8.53.0",
    "eslint-config-next": "14.0.0",
    "postcss": "^8.4.31",
    "tailwindcss": "^3.3.5",
    "typescript": "^5.2.2"
  }
}
---

## FILE: frontend/tsconfig.json
{
  "compilerOptions": {
    // Environment setup & latest features
    "lib": [
      "DOM",
      "DOM.Iterable",
      "ESNext"
    ],
    "target": "ESNext",
    "module": "esnext",
    "moduleDetection": "force",
    "jsx": "preserve",
    "allowJs": true,
    // Bundler mode
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "noEmit": true,
    // Best practices
    "strict": true,
    "skipLibCheck": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedIndexedAccess": true,
    "noImplicitOverride": true,
    // Some stricter flags (disabled by default)
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noPropertyAccessFromIndexSignature": false,
    "incremental": true,
    "esModuleInterop": true,
    "resolveJsonModule": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": [
    "next-env.d.ts",
    ".next/types/**/*.ts",
    "**/*.ts",
    "**/*.tsx"
  ],
  "exclude": [
    "node_modules"
  ]
}

---

## FILE: .gitignore
# Python-generated files
__pycache__/
*.py[oc]
build/
dist/
wheels/
*.egg-info

# Virtual environments
.venv

# Environment variables and secrets
.env
.env.local
.env.production
.env.staging
*.env

# Frontend environment files
frontend/.env
frontend/.env.local
frontend/.env.production

# Database files (ChromaDB)
backend/chroma_db/
*.sqlite3
*.db

# Temporary files
temp_*/
backend/temp_*/

# Log files
*.log
logs/

# IDE and editor files
.vscode/
.idea/
*.swp
*.swo

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Render specific
.render/

# Node modules (if any get created)
node_modules/

---

## FILE: ./generate-context.sh
#!/bin/bash
#
# Description:
# This script generates a comprehensive prompt for an LLM by concatenating key source
# files from both the Python backend and the Next.js frontend, along with project
# configuration and directory structure.
#
# Usage:
# ./generate-context.sh
#

# --- Configuration ---

# Get current date for the output filename
DATE=$(date +%Y%m%d-%H%M)

# Output filename with a timestamp
OUTPUT_FILE="project-context-prompt-${DATE}.txt"

# --- Script Body ---

# Clean up any previous output file to start fresh
rm -f "$OUTPUT_FILE"

echo "🚀 Starting LLM prompt generation for the monorepo project..."
echo "------------------------------------------------------------"
echo "Output will be saved to: $OUTPUT_FILE"
echo ""

# 1. Add a Preamble and Goal for the LLM
echo "Adding LLM preamble and goal..."
{
  echo "# Project Context & Goal"
  echo ""
  echo "## Goal for the LLM"
  echo "You are an expert full-stack developer and software architect with deep expertise in Python/FastAPI for backends and React/Next.js/TypeScript for frontends. Your task is to analyze the complete context of this monorepo project, which is provided below. Please review the project structure, dependencies, backend source code, frontend source code, and configuration, and then provide specific, actionable advice for improvement. Focus on code quality, best practices, potential bugs, architectural design, maintainability, and the synergy between the frontend and backend."
  echo ""
  echo "---"
  echo ""
} >> "$OUTPUT_FILE"

# 2. Add the project's directory structure (cleaned up)
echo "Adding cleaned directory structure..."
echo "## Directory Structure" >> "$OUTPUT_FILE"
if command -v tree &> /dev/null; then
    echo "  -> Adding directory structure (tree -L 5)"
    # Exclude common noise from the tree view for both backend and frontend
    tree -L 5 -I "__pycache__|.venv|venv|.git|.pytest_cache|.ruff_cache|.mypy_cache|htmlcov|*.pyc|node_modules|.next" >> "$OUTPUT_FILE"
else
    echo "  -> WARNING: 'tree' command not found. Skipping directory structure."
    echo "NOTE: 'tree' command was not found. Install it to include the directory structure." >> "$OUTPUT_FILE"
fi
echo "" >> "$OUTPUT_FILE"


# 3. Add Core Project and Configuration Files
echo "Adding core project and configuration files..."
# Core files that provide project context from both backend and frontend
CORE_FILES=(
  "README.md"
  "backend/pyproject.toml"
  "frontend/package.json"
  "frontend/tsconfig.json"
  ".env.example"
  ".gitignore"
  "$0" # This script itself
)

for file in "${CORE_FILES[@]}"; do
  if [ -f "$file" ]; then
    echo "  -> Adding $file"
    echo "## FILE: $file" >> "$OUTPUT_FILE"
    cat "$file" >> "$OUTPUT_FILE"
    echo "" >> "$OUTPUT_FILE"
    echo "---" >> "$OUTPUT_FILE"
    echo "" >> "$OUTPUT_FILE"
  else
    echo "  -> WARNING: $file not found. Skipping."
  fi
done

# 4. Add all Python source files from the backend
echo "Adding all Python source files from the 'backend'..."
# Find all Python files, excluding common directories we don't want
find "backend" -type f -name "*.py" \
  -not -path "*/.venv/*" \
  -not -path "*/venv/*" \
  -not -path "*/__pycache__/*" \
  -not -path "*/.pytest_cache/*" \
  | while read -r py_file; do
    echo "  -> Adding Python file: $py_file"
    echo "## FILE: $py_file" >> "$OUTPUT_FILE"
    cat "$py_file" >> "$OUTPUT_FILE"
    echo "" >> "$OUTPUT_FILE"
    echo "---" >> "$OUTPUT_FILE"
    echo "" >> "$OUTPUT_FILE"
  done

# 5. Add all TypeScript/JavaScript source files from the frontend
echo "Adding all TS/JS/TSX/JSX source files from the 'frontend'..."
find "frontend" -type f \( -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" \) \
  -not -path "*/node_modules/*" \
  -not -path "*/.next/*" \
  | while read -r ts_file; do
    echo "  -> Adding Frontend file: $ts_file"
    echo "## FILE: $ts_file" >> "$OUTPUT_FILE"
    cat "$ts_file" >> "$OUTPUT_FILE"
    echo "" >> "$OUTPUT_FILE"
    echo "---" >> "$OUTPUT_FILE"
    echo "" >> "$OUTPUT_FILE"
  done

# 6. Add key frontend styling and component files
echo "Adding other key frontend files (CSS, etc.)..."
find "frontend" -type f \( -name "*.css" -o -name "*.scss" \) \
  -not -path "*/node_modules/*" \
  -not -path "*/.next/*" \
  | while read -r css_file; do
    echo "  -> Adding Frontend style file: $css_file"
    echo "## FILE: $css_file" >> "$OUTPUT_FILE"
    cat "$css_file" >> "$OUTPUT_FILE"
    echo "" >> "$OUTPUT_FILE"
    echo "---" >> "$OUTPUT_FILE"
    echo "" >> "$OUTPUT_FILE"
  done


# --- Completion Summary ---

echo ""
echo "-------------------------------------"
echo "✅ Prompt generation complete!"
echo ""
echo "This context file now includes:"
echo "  ✓ A clear goal and preamble for the LLM"
echo "  ✓ A cleaned project directory structure"
echo "  ✓ Core project files (README.md, pyproject.toml, package.json, tsconfig.json)"
echo "  ✓ Configuration files (.gitignore, .env.example)"
echo "  ✓ This generation script itself"
echo "  ✓ All Python source code from the 'backend' directory (*.py)"
echo "  ✓ All TS/JS/TSX/JSX source code from the 'frontend' directory"
echo "  ✓ All CSS/SCSS source code from the 'frontend' directory"
echo ""
echo "File size: \$(du -h "\$OUTPUT_FILE" | cut -f1)"
echo "Total lines: \$(wc -l < "\$OUTPUT_FILE" | xargs)"
echo ""
echo "You can now use the content of '\$OUTPUT_FILE' as a context prompt for your LLM." 
---

## FILE: backend/health_check.py
#!/usr/bin/env python3
"""
Health check script for Render deployment verification
"""

import os
import sys
import time

import requests


def check_environment():
    """Check that required environment variables are set"""
    required_vars = [
        "OPENROUTER_API_KEY",
    ]

    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)

    if missing_vars:
        print(f"❌ Missing environment variables: {', '.join(missing_vars)}")
        return False

    print("✅ All required environment variables are set")
    return True


def check_api_health(base_url="http://localhost:8000"):
    """Check if the API is responding"""
    try:
        response = requests.get(f"{base_url}/", timeout=10)
        if response.status_code == 200:
            print("✅ API health check passed")
            return True
        else:
            print(f"❌ API health check failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"❌ API health check failed: {str(e)}")
        return False


def main():
    """Main health check function"""
    print("🔍 Running deployment health checks...")

    # Check environment variables
    env_ok = check_environment()

    # Wait a moment for the server to start
    print("⏳ Waiting for server to start...")
    time.sleep(5)

    # Check API health
    api_ok = check_api_health()

    if env_ok and api_ok:
        print("🎉 All health checks passed!")
        sys.exit(0)
    else:
        print("❌ Some health checks failed")
        sys.exit(1)


if __name__ == "__main__":
    main()

---

## FILE: backend/src/adaptive_questioning.py
import json
from typing import Dict, List, Optional

from pydantic import BaseModel


class AdaptiveQuestionEngine:
    def __init__(self):
        self.question_templates = {
            "missing_team": [
                "I notice your pitch doesn't mention the founding team. Can you tell me about your background and why you're uniquely positioned to solve this problem?",
                "What's your team's 'earned secret' - the unique insight or experience that gives you an unfair advantage?",
                "Who are the key team members and what relevant experience do they bring?",
            ],
            "unclear_market": [
                "Your market size seems unclear. Can you break down your TAM, SAM, and target market with specific numbers?",
                "How fast is your target market growing? What trends are driving this growth?",
                "Who exactly is your ideal customer? Can you describe a specific use case?",
            ],
            "weak_traction": [
                "I don't see strong traction metrics. What evidence do you have of product-market fit?",
                "What's your current user/revenue growth rate? What's driving that growth?",
                "Can you share retention curves or usage metrics that show user engagement?",
            ],
            "missing_economics": [
                "Your unit economics aren't clear. What's your customer acquisition cost (CAC) and lifetime value (LTV)?",
                "How do you make money? What's your gross margin and path to profitability?",
                "What are your key revenue drivers and how do they scale?",
            ],
            "undefined_problem": [
                "The problem statement could be sharper. What specific workflow breaks without your solution?",
                "How painful is this problem? What happens if customers don't solve it?",
                "What alternatives do customers use today and why are they insufficient?",
            ],
            "vague_solution": [
                "Your solution needs more specificity. What exactly does your product do?",
                "What's your key differentiator? Why is your approach 10x better than alternatives?",
                "Can you walk through the user experience step by step?",
            ],
            "missing_persona": [
                "Your user persona isn't clear. Who exactly are you building for?",
                "What job is your user trying to get done? What's their current workflow?",
                "Can you describe a day in the life of your target user?",
            ],
            "unclear_metrics": [
                "What success metrics will prove your product is working?",
                "How do you measure user engagement and value creation?",
                "What are your key retention and conversion benchmarks?",
            ],
            "missing_roadmap": [
                "What are your next 3 major product milestones?",
                "How do you prioritize features? What's your framework for product decisions?",
                "What's your timeline for reaching key product-market fit indicators?",
            ],
        }

    def generate_adaptive_questions(
        self, missing_sections: List[str], agent_type: str, context: str = ""
    ) -> List[Dict]:
        """Generate context-aware follow-up questions based on missing sections"""

        questions = []
        question_count = 0
        max_questions = 3  # Limit to avoid overwhelming

        # Prioritize questions based on agent type
        if agent_type == "Shark VC":
            priority_order = [
                "missing_team",
                "unclear_market",
                "weak_traction",
                "missing_economics",
            ]
        else:  # Product PM
            priority_order = [
                "undefined_problem",
                "vague_solution",
                "missing_persona",
                "unclear_metrics",
                "missing_roadmap",
            ]

        # Map missing sections to question templates
        section_to_template = {
            "team": "missing_team",
            "market": "unclear_market",
            "traction": "weak_traction",
            "economics": "missing_economics",
            "problem": "undefined_problem",
            "solution": "vague_solution",
            "persona": "missing_persona",
            "metrics": "unclear_metrics",
            "roadmap": "missing_roadmap",
        }

        for section in missing_sections:
            template_key = section_to_template.get(section)
            if (
                template_key
                and template_key in priority_order
                and question_count < max_questions
            ):
                template_questions = self.question_templates.get(template_key, [])
                if template_questions:
                    questions.append(
                        {
                            "section": section,
                            "question": template_questions[
                                0
                            ],  # Use first question as primary
                            "alternatives": template_questions[
                                1:
                            ],  # Store alternatives
                            "priority": len(priority_order)
                            - priority_order.index(template_key)
                            if template_key in priority_order
                            else 0,  # Higher number = higher priority
                        }
                    )
                    question_count += 1

        return sorted(questions, key=lambda x: x["priority"], reverse=True)

    def contextualize_question(
        self, base_question: str, founder_context: str, document_content: str
    ) -> str:
        """Personalize questions based on founder's specific context and uploaded documents"""

        # Simple contextualization - in production, use LLM for more sophisticated personalization
        if (
            "fintech" in founder_context.lower()
            or "finance" in document_content.lower()
        ):
            base_question = base_question.replace(
                "customers", "users or financial institutions"
            )
        elif (
            "defi" in founder_context.lower() or "protocol" in document_content.lower()
        ):
            base_question = base_question.replace(
                "customers", "users and liquidity providers"
            )
        elif "gaming" in founder_context.lower() or "game" in document_content.lower():
            base_question = base_question.replace(
                "customers", "players and game developers"
            )
        elif (
            "ai" in founder_context.lower()
            or "artificial intelligence" in document_content.lower()
        ):
            base_question = base_question.replace(
                "customers", "AI users and enterprises"
            )
        elif (
            "starknet" in founder_context.lower() or "cairo" in document_content.lower()
        ):
            base_question = base_question.replace(
                "customers", "developers and protocols"
            )

        return base_question

---

## FILE: backend/src/__init__.py
# This file makes the src directory a Python package

---

## FILE: backend/src/prompts.py
"""
Persona prompts for different VC/PM personalities
"""

from enum import Enum


class AgentType(Enum):
    SHARK_VC = "Shark VC"
    PRODUCT_PM = "Product PM"


SHARK_VC_PROMPT = """
You are a top-tier venture capitalist - a blend of partners from Sequoia, a16z, and Y Combinator. 
You're brutally direct but constructive. Your goal: stress-test every assumption and expose weaknesses 
to help founders build stronger businesses.

CRITICAL WRITING STYLE RULES (Based on William Zinsser's "On Writing Well"):
- Write like you speak to a technical founder. Short sentences. Clear points.
- Cut every unnecessary word. If a sentence works without a word, delete it.
- Use active voice. "You need to fix X" not "X needs to be fixed"
- One idea per sentence. One topic per paragraph.
- Avoid jargon unless necessary. When you use it, make it count.
- No flowery language or AI-speak. No "I appreciate" or "It's great that"
- Start with your main point. Don't bury the lede.
- Use concrete examples, not abstract concepts.
- Numbers and specifics over generalities.
- Write like you're texting a smart friend, not drafting a formal letter.

When analyzing pitches, focus on these areas:
1. **Team** - What's your unique insight? Why you?
2. **Market** - TAM size? Show me data.
3. **Problem/Solution** - Which workflow breaks without you?
4. **Traction** - Retention curves. Revenue. Hard numbers.
5. **Unit Economics** - CAC, LTV, payback period.
6. **Competition** - Why can't FAANG copy this?
7. **Business Model** - Margins at scale?
8. **Funding** - Milestones per dollar raised.
9. **Exit** - Who buys you? At what multiple?
10. **Risks** - What kills this company?

Use web search to fact-check claims and find comparables. Be direct, challenging, but helpful.
Never use more than 3-4 sentences per paragraph. Keep total responses under 200 words unless analyzing specific data.
"""

PRODUCT_PM_PROMPT = """
You are Lenny Rachitsky, the legendary product management coach. You're known for practical, 
evidence-based advice backed by real examples from successful companies.

CRITICAL WRITING STYLE RULES (Based on William Zinsser's "On Writing Well"):
- Write like a technical PM talking to another PM. Brief. Clear. Actionable.
- Every sentence must earn its place. Cut the fluff.
- Lead with the insight, then explain why.
- One concept per paragraph. Make it scannable.
- Use bullet points sparingly - only for true lists.
- Concrete > abstract. "Stripe does X" beats "Companies often do X"
- Skip the pleasantries. Jump straight to the meat.
- Write like a Slack DM, not a Medium post.
- If you can show it with data, don't tell it with words.
- Maximum 3-4 sentences per paragraph. Total response under 200 words unless analyzing specifics.

Focus areas:
1. **Market** - Is it big and growing? Show segments.
2. **User & JTBD** - Who exactly? What job?
3. **Problem** - Hair on fire test. How painful?
4. **Solution** - Why 10x better than alternatives?
5. **Roadmap** - What's next? Why?
6. **Metrics** - North Star? Leading indicators?
7. **MVP → MLP** - Path from viable to lovable?
8. **Narrative** - Can you write the press release?
9. **Learning** - What experiments this week?

Key frameworks:
- Jobs-to-be-Done 
- Product-market fit pyramid
- Founder mode vs manager mode

Remember: Good PM = relentless prioritization + rapid learning.
Cite real examples (Airbnb, Stripe, Notion) when relevant. Be specific.
"""


def get_prompt(agent_type: AgentType) -> str:
    """Get the appropriate prompt based on agent type"""
    if agent_type == AgentType.SHARK_VC:
        return SHARK_VC_PROMPT
    elif agent_type == AgentType.PRODUCT_PM:
        return PRODUCT_PM_PROMPT
    else:
        return SHARK_VC_PROMPT  # Default fallback

---

## FILE: backend/src/analysis_engine.py
from typing import Dict, List, Optional

from pydantic import BaseModel

from .prompts import AgentType


class AnalysisResult(BaseModel):
    missing_sections: List[str]
    suggested_actions: List[Dict[str, str]]
    help_tooltips: Dict[str, str]
    next_steps: List[str]


class PitchDeckAnalyzer:
    def __init__(self):
        self.vc_rubric = {
            "team": {
                "keywords": [
                    "founder",
                    "team",
                    "experience",
                    "background",
                    "CEO",
                    "CTO",
                    "leadership",
                ],
                "help_text": "Investors need to know why YOU are the right team to solve this problem. Include founding team backgrounds, relevant experience, and unique insights.",
                "missing_action": "Upload a team slide or answer: What unique experience qualifies your team to solve this problem?",
            },
            "market": {
                "keywords": [
                    "TAM",
                    "market size",
                    "billion",
                    "opportunity",
                    "market",
                    "addressable",
                ],
                "help_text": "VCs want to see a large, growing market. Show Total Addressable Market (TAM), Serviceable Available Market (SAM), and your target market size.",
                "missing_action": "Provide market sizing data or answer: What's your TAM? How fast is the market growing? What's your target market?",
            },
            "traction": {
                "keywords": [
                    "users",
                    "revenue",
                    "growth",
                    "MRR",
                    "customers",
                    "metrics",
                    "retention",
                ],
                "help_text": "Traction proves market demand. Show user growth, revenue metrics, retention rates, and key partnerships.",
                "missing_action": "Share your traction metrics or answer: How many users/customers do you have? What's your monthly growth rate? What's your retention?",
            },
            "economics": {
                "keywords": [
                    "CAC",
                    "LTV",
                    "unit economics",
                    "margin",
                    "profitability",
                    "monetization",
                ],
                "help_text": "Unit economics show path to profitability. Include Customer Acquisition Cost (CAC), Lifetime Value (LTV), and gross margins.",
                "missing_action": "Define your unit economics: What's your CAC and LTV? How do you make money per customer?",
            },
            "competition": {
                "keywords": [
                    "competitors",
                    "competitive",
                    "advantage",
                    "differentiation",
                    "moat",
                ],
                "help_text": "Show understanding of competitive landscape and your defensible advantages.",
                "missing_action": "Analyze your competition: Who are your main competitors and what's your unique advantage?",
            },
            "problem": {
                "keywords": [
                    "problem",
                    "pain point",
                    "challenge",
                    "issue",
                    "frustration",
                ],
                "help_text": "Clearly articulate the problem you're solving and why it matters to customers.",
                "missing_action": "Define the problem: What specific pain point are you solving? How painful is it?",
            },
        }

        self.pm_rubric = {
            "persona": {
                "keywords": [
                    "user persona",
                    "JTBD",
                    "customer profile",
                    "target user",
                    "user research",
                ],
                "help_text": "Clear user personas drive product decisions. Define who your users are, their pain points, and jobs-to-be-done.",
                "missing_action": "Create user personas or answer: Who exactly is your target user? What job are they hiring your product to do?",
            },
            "problem": {
                "keywords": [
                    "problem",
                    "pain point",
                    "user frustration",
                    "workflow",
                    "friction",
                ],
                "help_text": "Deep problem understanding is crucial. Map user workflows and identify specific friction points.",
                "missing_action": "Detail the problem: What specific workflow breaks? What happens when users can't solve this?",
            },
            "solution": {
                "keywords": [
                    "solution",
                    "feature",
                    "product",
                    "functionality",
                    "user experience",
                ],
                "help_text": "Product solution should directly address user pain points with clear value proposition.",
                "missing_action": "Describe your solution: How exactly does your product solve the user's problem? What's the user flow?",
            },
            "metrics": {
                "keywords": [
                    "metrics",
                    "KPI",
                    "engagement",
                    "retention",
                    "conversion",
                    "success",
                ],
                "help_text": "Define success metrics that prove product-market fit and user value.",
                "missing_action": "Define success metrics: How do you measure user success? What are your key engagement metrics?",
            },
            "roadmap": {
                "keywords": [
                    "roadmap",
                    "timeline",
                    "milestone",
                    "development",
                    "iteration",
                ],
                "help_text": "Product roadmap shows strategic thinking and prioritization framework.",
                "missing_action": "Share your roadmap: What are your next 3 major product milestones? How do you prioritize features?",
            },
        }

    def analyze_document_gaps(
        self, content: str, agent_type: AgentType
    ) -> AnalysisResult:
        rubric = self.vc_rubric if agent_type == AgentType.SHARK_VC else self.pm_rubric
        missing_sections = []
        suggested_actions = []
        help_tooltips = {}

        for section_id, section_data in rubric.items():
            # Check if section is covered in content
            keywords_found = sum(
                1
                for keyword in section_data["keywords"]
                if keyword.lower() in content.lower()
            )

            if keywords_found < 2:  # Threshold for "covered"
                missing_sections.append(section_id)
                suggested_actions.append(
                    {
                        "section": section_id,
                        "action": section_data["missing_action"],
                        "priority": "high"
                        if section_id in ["team", "market", "traction", "problem"]
                        else "medium",
                    }
                )

            help_tooltips[section_id] = section_data["help_text"]

        return AnalysisResult(
            missing_sections=missing_sections,
            suggested_actions=suggested_actions,
            help_tooltips=help_tooltips,
            next_steps=self._generate_next_steps(missing_sections, agent_type),
        )

    def _generate_next_steps(
        self, missing_sections: List[str], agent_type: AgentType
    ) -> List[str]:
        if agent_type == AgentType.SHARK_VC:
            priorities = [
                "team",
                "market",
                "traction",
                "economics",
                "competition",
                "problem",
            ]
        else:
            priorities = ["persona", "problem", "solution", "metrics", "roadmap"]

        next_steps = []
        for priority in priorities:
            if priority in missing_sections:
                next_steps.append(
                    f"Focus on {priority} - this is critical for {agent_type.value}"
                )
                if len(next_steps) >= 3:  # Limit to top 3 priorities
                    break

        return next_steps

---

## FILE: backend/src/main.py
import os
import shutil
import time
import logging
from collections import defaultdict
from typing import Dict, Optional, Any, List
from logging.handlers import RotatingFileHandler

import chromadb
from dotenv import load_dotenv
from fastapi import FastAPI, File, HTTPException, Request, UploadFile
from fastapi.middleware.cors import CORSMiddleware
import socketio
from llama_index.core import Settings, SimpleDirectoryReader, VectorStoreIndex
# --- 1. IMPORT THE SPECIFIC CHAT ENGINE CLASS ---
from llama_index.core.chat_engine import ContextChatEngine
from llama_index.core.memory import ChatMemoryBuffer
from llama_index.core.storage.storage_context import StorageContext
from llama_index.core.vector_stores import ExactMatchFilter, MetadataFilters
from llama_index.llms.openai_like import OpenAILike
from llama_index.vector_stores.chroma import ChromaVectorStore
from pydantic import BaseModel

from .adaptive_questioning import AdaptiveQuestionEngine
from .analysis_engine import PitchDeckAnalyzer
from .prompts import AgentType, get_prompt

# --- Load Environment and Configure Settings ---
load_dotenv()

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# Create a rotating file handler
file_handler = RotatingFileHandler(
    'backend.log', maxBytes=10485760, backupCount=5
)
file_handler.setLevel(logging.INFO)
file_handler.setFormatter(
    logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
)

# Get logger
logger = logging.getLogger(__name__)
logger.addHandler(file_handler)

Settings.llm = OpenAILike(
    api_base="https://openrouter.ai/api/v1",
    api_key=os.getenv("OPENROUTER_API_KEY"),
    model="anthropic/claude-3.5-sonnet",
    is_chat_model=True,
    context_window=200000,
)
Settings.embed_model = "local:BAAI/bge-small-en-v1.5"


def get_llm_for_agent(agent_type: AgentType):
    """Get the appropriate LLM based on agent type"""
    if agent_type == AgentType.SHARK_VC:
        # Use Perplexity Sonar Pro for web-search enabled VC analysis
        return OpenAILike(
            api_base="https://openrouter.ai/api/v1",
            api_key=os.getenv("OPENROUTER_API_KEY"),
            model="perplexity/sonar-pro",
            is_chat_model=True,
            context_window=200000,
            max_tokens=400,  # Add this line
        )
    else:
        # Use Claude for Product PM deep thinking
        return OpenAILike(
            api_base="https://openrouter.ai/api/v1",
            api_key=os.getenv("OPENROUTER_API_KEY"),
            model="anthropic/claude-3.5-sonnet",
            is_chat_model=True,
            context_window=200000,
            max_tokens=400,  # Add this line
        )


# --- Database and Vector Store Setup ---
db = chromadb.PersistentClient(path="./chroma_db")
chroma_collection = db.get_or_create_collection("starknet_copilot")
vector_store = ChromaVectorStore(chroma_collection=chroma_collection)
storage_context = StorageContext.from_defaults(vector_store=vector_store)
index = VectorStoreIndex.from_vector_store(
    vector_store, storage_context=storage_context
)

# --- In-Memory Session Storage ---
chat_engines = {}

# --- Analysis and Research Services ---
analyzer = PitchDeckAnalyzer()
question_engine = AdaptiveQuestionEngine()

# --- Rate Limiting ---
request_counts = defaultdict(list)
expensive_request_counts = defaultdict(list)

# General API rate limits
RATE_LIMIT_REQUESTS = 60  # requests per minute for general endpoints
RATE_LIMIT_WINDOW = 60  # seconds

# Expensive operations rate limits (AI-powered features)
EXPENSIVE_RATE_LIMIT = 30  # requests per minute for AI operations (increased for better UX)
EXPENSIVE_RATE_WINDOW = 60  # seconds


def check_rate_limit(client_ip: str, is_expensive: bool = False):
    """Rate limiting based on client IP and operation type"""
    now = time.time()

    if is_expensive:
        # Clean old expensive requests
        expensive_request_counts[client_ip] = [
            req_time
            for req_time in expensive_request_counts[client_ip]
            if now - req_time < EXPENSIVE_RATE_WINDOW
        ]

        # Check expensive operation rate limit
        if len(expensive_request_counts[client_ip]) >= EXPENSIVE_RATE_LIMIT:
            wait_time = EXPENSIVE_RATE_WINDOW - (now - min(expensive_request_counts[client_ip]))
            logger.warning(f"Rate limit exceeded for {client_ip}: {len(expensive_request_counts[client_ip])}/{EXPENSIVE_RATE_LIMIT} requests")
            raise HTTPException(
                status_code=429,
                detail=f"Too many AI requests. Please wait {int(wait_time)} seconds before trying again. Current: {len(expensive_request_counts[client_ip])}/{EXPENSIVE_RATE_LIMIT} requests per minute.",
                headers={"Retry-After": str(int(wait_time))}
            )

        # Add current expensive request
        expensive_request_counts[client_ip].append(now)

    # Always check general rate limit
    request_counts[client_ip] = [
        req_time
        for req_time in request_counts[client_ip]
        if now - req_time < RATE_LIMIT_WINDOW
    ]

    if len(request_counts[client_ip]) >= RATE_LIMIT_REQUESTS:
        raise HTTPException(
            status_code=429,
            detail=f"Rate limit exceeded. Please try again later. Limit: {RATE_LIMIT_REQUESTS} requests per minute.",
        )

    # Add current request
    request_counts[client_ip].append(now)


# --- Application Setup ---
app = FastAPI(
    title="Starknet VC Co-pilot MVP",
    description="An AI co-pilot for founders to get feedback on their pitch decks.",
    version="0.1.0",
)

# Determine allowed origins based on environment
FRONTEND_URL = os.getenv("FRONTEND_URL", "http://localhost:3000")
PRODUCTION_FRONTEND = os.getenv("PRODUCTION_FRONTEND_URL", "")

# Build allowed origins list with proper protocol handling
allowed_origins = []

# Handle FRONTEND_URL (from Render service or local dev)
if FRONTEND_URL:
    # Ensure production URLs have https:// prefix
    if FRONTEND_URL.startswith("starknet-founders-bot-frontend") and not FRONTEND_URL.startswith("http"):
        FRONTEND_URL = f"https://{FRONTEND_URL}"
    allowed_origins.append(FRONTEND_URL)

# Handle additional production frontend URL
if PRODUCTION_FRONTEND:
    allowed_origins.append(PRODUCTION_FRONTEND)

# Always allow localhost for development
if "http://localhost:3000" not in allowed_origins:
    allowed_origins.append("http://localhost:3000")

# Log allowed origins for debugging
logger.info(f"CORS allowed origins: {allowed_origins}")
logger.info(f"Raw FRONTEND_URL env var: {os.getenv('FRONTEND_URL')}")
logger.info(f"Raw PRODUCTION_FRONTEND_URL env var: {os.getenv('PRODUCTION_FRONTEND_URL')}")

# IMPORTANT: Add CORS middleware BEFORE SocketManager to ensure OPTIONS requests work
app.add_middleware(
    CORSMiddleware,
    allow_origins=allowed_origins,
    allow_credentials=True,
    allow_methods=["*"],  # Allow all methods including OPTIONS
    allow_headers=["*"],  # Allow all headers for preflight requests
)

# Create Socket.IO server with CORS support
sio = socketio.AsyncServer(
    async_mode='asgi',
    cors_allowed_origins=allowed_origins
)

# Wrap FastAPI app with Socket.IO
socket_app = socketio.ASGIApp(sio, app)

@sio.event
async def connect(sid, environ):
    origin = environ.get('HTTP_ORIGIN', 'Unknown')
    logger.info(f"Client {sid} connected from origin: {origin}")

@sio.event
async def disconnect(sid):
    logger.info(f"Client {sid} disconnected")

@sio.event
async def connect_error(sid, data):
    logger.error(f"Socket.IO connection error for {sid}: {data}")

@sio.event
async def user_typing(sid, data):
    founder_id = data.get('founderId')
    await sio.emit('user_typing', 
                   {'userId': data.get('userId')}, 
                   room=founder_id)


# --- Data Models ---
class ChatRequest(BaseModel):
    founder_id: str
    message: str
    agent_type: Optional[str] = "Shark VC"  # Default to Shark VC


class ChatResponse(BaseModel):
    reply: str


class UploadResponse(BaseModel):
    message: str
    filename: str
    analysis: Optional[Dict[str, Any]] = None  # Contains analysis results for both agents


class AdaptiveQuestionsRequest(BaseModel):
    missing_sections: List[str]
    agent_type: str = "Shark VC"
    founder_context: str = ""
    document_content: str = ""


# --- API Endpoints ---
@app.post("/upload/{founder_id}", response_model=UploadResponse)
async def upload_document(
    founder_id: str, file: UploadFile = File(...), request: Request = None
):
    # Rate limiting (expensive operation - file processing + AI analysis)
    if request:
        client_ip = request.client.host
        check_rate_limit(client_ip, is_expensive=True)

    # Enhanced security validation
    if file.content_type != "application/pdf":
        raise HTTPException(
            status_code=400, detail="Invalid file type. Only PDFs are accepted."
        )

    # File size check (10MB limit)
    if file.size and file.size > 10 * 1024 * 1024:
        raise HTTPException(
            status_code=413, detail="File too large. Maximum size is 10MB."
        )

    # Validate founder_id format (alphanumeric, email, or "anonymous")
    if not founder_id or len(founder_id) > 100:
        raise HTTPException(status_code=400, detail="Invalid founder ID.")

    # Sanitize filename to prevent path traversal attacks
    if not file.filename:
        raise HTTPException(status_code=400, detail="No filename provided.")

    safe_filename = "".join(
        c for c in file.filename if c.isalnum() or c in (" ", ".", "_", "-")
    ).rstrip()
    if not safe_filename or not safe_filename.endswith(".pdf"):
        raise HTTPException(status_code=400, detail="Invalid filename.")

    temp_dir = f"./temp_{founder_id.replace('@', '_').replace('.', '_')}/"
    os.makedirs(temp_dir, exist_ok=True)

    try:
        file_path = os.path.join(temp_dir, safe_filename)

        # Write file with size limit check during writing
        with open(file_path, "wb") as buffer:
            content = await file.read()
            if len(content) > 10 * 1024 * 1024:
                raise HTTPException(
                    status_code=413, detail="File too large. Maximum size is 10MB."
                )
            buffer.write(content)

        reader = SimpleDirectoryReader(
            input_files=[file_path],
            file_metadata=lambda filename: {"founder_id": founder_id},
        )
        documents = reader.load_data()
        index.insert_nodes(documents)

        # 🔥 Automatically analyze the newly uploaded document for both agent types!
        analysis = None
        try:
            document_text = " ".join(doc.text for doc in documents)
            
            # Run analysis for both agent types
            analysis_pm = analyzer.analyze_document_gaps(
                document_text, AgentType("Product PM")
            )
            analysis_vc = analyzer.analyze_document_gaps(
                document_text, AgentType("Shark VC")
            )
            
            analysis = {
                "Product PM": analysis_pm.dict() if hasattr(analysis_pm, 'dict') else analysis_pm,
                "Shark VC": analysis_vc.dict() if hasattr(analysis_vc, 'dict') else analysis_vc,
            }
            
            # Notify connected clients via Socket.IO
            await sio.emit("analysis_ready", {
                "founder_id": founder_id,
                "analysis": analysis,
                "filename": safe_filename
            })
            
            logger.info(f"Auto-analysis completed for {founder_id}")
            
        except Exception as analysis_error:
            logger.error(f"Auto-analysis on upload failed for {founder_id}: {analysis_error}", exc_info=True)
            analysis = None

        return {
            "message": f"Document indexed and analyzed successfully for founder {founder_id}",
            "filename": safe_filename,
            "analysis": analysis,
        }

    except Exception as e:
        # Log error for debugging but don't expose internal details
        logger.error(f"Upload error for {founder_id}: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail="Failed to process document.")

    finally:
        # Ensure temp directory is always cleaned up
        if os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)


@app.post("/chat", response_model=ChatResponse)
async def handle_chat(request: ChatRequest):
    founder_id = request.founder_id
    agent_type = AgentType(request.agent_type)

    # Create composite key for session storage
    session_key = f"{founder_id}_{agent_type.value}"

    if session_key not in chat_engines:
        retriever = index.as_retriever(
            vector_store_query_mode="default",
            filters=MetadataFilters(
                filters=[ExactMatchFilter(key="founder_id", value=founder_id)]
            ),
        )
        memory = ChatMemoryBuffer.from_defaults(token_limit=1500)

        # Get the appropriate LLM and prompt
        llm = get_llm_for_agent(agent_type)
        prompt = get_prompt(agent_type)

        # Create chat engine with specific LLM
        chat_engines[session_key] = ContextChatEngine.from_defaults(
            retriever=retriever,
            memory=memory,
            system_prompt=prompt,
            llm=llm,  # Pass the specific LLM
        )

    chat_engine = chat_engines[session_key]
    response = await chat_engine.achat(request.message)

    return {"reply": str(response)}


@app.post("/reset/{founder_id}")
async def reset_chat(founder_id: str, agent_type: Optional[str] = None):
    if agent_type:
        session_key = f"{founder_id}_{agent_type}"
        if session_key in chat_engines:
            del chat_engines[session_key]
            return {"message": f"Chat session for {agent_type} has been reset."}
    else:
        # Reset all sessions for this founder
        keys_to_delete = [
            key for key in chat_engines.keys() if key.startswith(f"{founder_id}_")
        ]
        for key in keys_to_delete:
            del chat_engines[key]
        return {
            "message": f"All chat sessions for founder {founder_id} have been reset."
        }

    return {"message": f"No active session found."}


# --- Analysis and Research Endpoints ---
@app.post("/analyze/{founder_id}")
async def analyze_pitch_deck(
    founder_id: str, agent_type: str = "Shark VC", request: Request = None
):
    # Rate limiting for AI analysis operations
    if request:
        client_ip = request.client.host
        check_rate_limit(client_ip, is_expensive=True)

    # Input validation
    if not founder_id or len(founder_id) > 100:
        raise HTTPException(status_code=400, detail="Invalid founder ID")

    # Validate agent_type
    valid_agents = ["Shark VC", "Product PM"]
    if agent_type not in valid_agents:
        raise HTTPException(status_code=400, detail="Invalid agent type")

    try:
        # Get founder's documents from vector store
        retriever = index.as_retriever(
            filters=MetadataFilters(
                filters=[ExactMatchFilter(key="founder_id", value=founder_id)]
            )
        )

        # Retrieve relevant document content
        docs = retriever.retrieve("pitch deck analysis")
        content = " ".join([doc.text for doc in docs])

        if not content or len(content.strip()) < 50:
            raise HTTPException(
                status_code=404,
                detail="No sufficient document content found for analysis",
            )

        analysis = analyzer.analyze_document_gaps(content, AgentType(agent_type))
        return analysis

    except Exception as e:
        logger.error(f"Analysis error for {founder_id}: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail="Failed to analyze documents")











@app.post("/adaptive-questions")
async def get_adaptive_questions(request: AdaptiveQuestionsRequest, req: Request = None):
    # Rate limiting for AI question generation
    if req:
        client_ip = req.client.host
        check_rate_limit(client_ip, is_expensive=True)

    # Validate list length
    if len(request.missing_sections) > 20:
        raise HTTPException(status_code=400, detail="Too many missing sections")

    # Validate agent_type
    valid_agents = ["Shark VC", "Product PM"]
    if request.agent_type not in valid_agents:
        raise HTTPException(status_code=400, detail="Invalid agent type")

    # Validate string lengths
    if len(request.founder_context) > 500:
        raise HTTPException(status_code=400, detail="Founder context too long")

    if len(request.document_content) > 5000:
        raise HTTPException(status_code=400, detail="Document content too long")

    try:
        questions = question_engine.generate_adaptive_questions(
            request.missing_sections, request.agent_type
        )

        # Contextualize questions
        for question in questions:
            question["question"] = question_engine.contextualize_question(
                question["question"], request.founder_context, request.document_content
            )

        return {"questions": questions}
    except Exception as e:
        logger.error(f"Adaptive questions error: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail="Failed to generate questions")


# --- Health Check ---
@app.get("/")
def read_root():
    return {"status": "Starknet VC Co-pilot API is running"}


# Export the Socket.IO wrapped app for both REST and WebSocket support
# This preserves all FastAPI middleware (including CORS) and adds Socket.IO functionality
if __name__ != "__main__":
    # For production (uvicorn/gunicorn), export the Socket.IO wrapped FastAPI app
    app = socket_app

# For local development (CLI run)
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("src.main:socket_app", host="0.0.0.0", port=8000)

---

## FILE: frontend/types/next-auth.d.ts
import NextAuth from "next-auth"

declare module "next-auth" {
  interface Session {
    user: {
      id: string
      name?: string | null
      email?: string | null
      image?: string | null
    }
    accessToken?: string
  }
}

declare module "next-auth/jwt" {
  interface JWT {
    id: string
    accessToken?: string
  }
} 
---

## FILE: frontend/app/components/ui/tabs.tsx
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/app/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent } 
---

## FILE: frontend/app/components/ui/card.tsx
import * as React from "react"
import { cn } from "@/app/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent } 
---

## FILE: frontend/app/components/ui/toaster.tsx
"use client"

import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/app/components/ui/toast"
import { useToast } from "@/app/hooks/use-toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
} 
---

## FILE: frontend/app/components/ui/switch.tsx
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/app/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch } 
---

## FILE: frontend/app/components/ui/dialog.tsx
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"
import { cn } from "@/app/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
} 
---

## FILE: frontend/app/components/ui/badge.tsx
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/app/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants } 
---

## FILE: frontend/app/components/ui/button.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/app/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90 hover:scale-105",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
        gradient: "bg-gradient-to-r from-blue-600 to-purple-600 text-white hover:from-blue-700 hover:to-purple-700 hover:scale-105",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants } 
---

## FILE: frontend/app/components/ui/toast.tsx
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"
import { cn } from "@/app/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
        success: "border-green-600 bg-green-600 text-white",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
} 
---

## FILE: frontend/app/components/ui/textarea.tsx
import * as React from "react"
import { cn } from "@/app/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 resize-none",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea } 
---

## FILE: frontend/app/components/ui/input.tsx
import * as React from "react"
import { cn } from "@/app/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input } 
---

## FILE: frontend/app/hooks/use-toast.ts
import * as React from "react"
import type { ToastActionElement, ToastProps } from "@/app/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast } 
---

## FILE: frontend/app/layout.tsx
import type { Metadata } from "next"
import { Inter } from "next/font/google"
import "./globals.css"
import Providers from "./providers"

const inter = Inter({ subsets: ["latin"] })

export const metadata: Metadata = {
  title: "Starknet Founders Bot",
  description: "AI-powered feedback for your startup pitch",
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" className="dark">
      <body className={inter.className}>
        <Providers>{children}</Providers>
      </body>
    </html>
  )
} 
---

## FILE: frontend/app/lib/utils.ts
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
} 
---

## FILE: frontend/app/api/auth/[...nextauth]/route.ts
import NextAuth from "next-auth"
import GithubProvider from "next-auth/providers/github"

const handler = NextAuth({
  providers: [
    GithubProvider({
      clientId: process.env.GITHUB_ID!,
      clientSecret: process.env.GITHUB_SECRET!,
    }),
  ],
  callbacks: {
    async jwt({ token, account }) {
      if (account) {
        token.accessToken = account.access_token
      }
      return token
    },
    async session({ session, token }) {
      session.user.id = token.sub!
      session.accessToken = token.accessToken as string
      return session
    },
  },
  pages: {
    signIn: '/',
  },
})

export { handler as GET, handler as POST } 
---

## FILE: frontend/app/page.tsx
"use client"

import { useState, useEffect, useRef, useMemo } from 'react'
import { useSession } from 'next-auth/react'
import { io, Socket } from 'socket.io-client'
import confetti from 'canvas-confetti'
import { supabase, type ChatMessage } from '@/lib/supabase'
import posthog from 'posthog-js'
import Header from '@/components/header'
import AgentSelector from '@/components/agent-selector'
import ChatInterface from '@/components/chat-interface'
import MessageInput from '@/components/message-input'
import ProgressIndicators from '@/components/progress-indicators'
import OnboardingGuide from '@/components/onboarding-guide'
import SmartSuggestions from '@/components/smart-suggestions'
import AdaptiveQuestions from '@/components/adaptive-questions'
import FeedbackModal from '@/components/feedback-modal'
import { Card } from '@/app/components/ui/card'
import { useToast } from '@/app/hooks/use-toast'
import { Button } from '@/app/components/ui/button'
import { Github } from 'lucide-react'
import { signIn } from 'next-auth/react'
import { analyzeCompletedTopics } from '@/lib/topic-analyzer'

interface Message {
  role: 'user' | 'assistant'
  content: string
}

// Helper function to format analysis results into a readable message
const formatAnalysisMessage = (analysis: any, agent: string): string => {
  const sections = []
  
  if (analysis.missing_sections && analysis.missing_sections.length > 0) {
    sections.push(`**Missing Sections Identified:**\n${analysis.missing_sections.map((section: string) => `• ${section}`).join('\n')}`)
  }
  
  if (analysis.smart_suggestions && analysis.smart_suggestions.length > 0) {
    sections.push(`**Smart Suggestions:**\n${analysis.smart_suggestions.map((suggestion: any) => `• ${suggestion.title || suggestion}`).join('\n')}`)
  }
  
  if (analysis.score) {
    sections.push(`**Overall Score:** ${analysis.score}/100`)
  }
  
  const intro = agent === 'Product PM' 
    ? "I've analyzed your document from a product perspective. Here's what I found:"
    : "I've reviewed your pitch deck like a VC would. Here are my insights:"
  
  return sections.length > 0 
    ? `${intro}\n\n${sections.join('\n\n')}\n\nWhat would you like to explore further?`
    : `${intro}\n\nYour document looks comprehensive! What specific aspects would you like to discuss?`
}

export default function Home() {
  const { data: session, status } = useSession()
  const { toast } = useToast()
  const [selectedAgent, setSelectedAgent] = useState('Product PM')
  const [messages, setMessages] = useState<Message[]>([])
  const [isLoading, setIsLoading] = useState(false)
  const [completedTopics, setCompletedTopics] = useState<string[]>([])
  const [showOnboarding, setShowOnboarding] = useState(true)
  
  // New state for Socket.io and feedback
  const socket = useRef<Socket | null>(null)
  const [isOtherUserTyping, setIsOtherUserTyping] = useState<string | null>(null)
  const [showFeedback, setShowFeedback] = useState(false)
  const [lastFeedbackCount, setLastFeedbackCount] = useState(0)

  const founderId = session?.user?.email || "anonymous"
  const apiUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'

  // Memoize missingSections to prevent unnecessary API calls
  const missingSections = useMemo(() => {
    return completedTopics.length < 5 ? ['team', 'market', 'traction'] : []
  }, [completedTopics.length]) // Only recalculate when the length changes

  // Analyze messages for completed topics with toast notifications
  useEffect(() => {
    if (messages.length > 0) {
      const newTopics = analyzeCompletedTopics(messages, selectedAgent)
      
      // Check if any new topics were completed
      const newlyCompleted = newTopics.filter(topic => !completedTopics.includes(topic))
      
      if (newlyCompleted.length > 0 && completedTopics.length > 0) {
        // Show a toast for newly completed topics
        const topicLabels: { [key: string]: string } = {
          team: 'Team & Founders',
          market: 'Market Analysis',
          problem: 'Problem/Solution Fit',
          traction: 'Traction Metrics',
          economics: 'Unit Economics',
          competition: 'Competitive Analysis',
          model: 'Business Model',
          funding: 'Use of Funds',
          exit: 'Exit Strategy',
          risks: 'Risk Assessment',
          persona: 'User Persona',
          solution: 'Solution Design',
          roadmap: 'Product Roadmap',
          metrics: 'Success Metrics',
          mvp: 'MVP Strategy',
          narrative: 'Product Story',
          experiments: 'Learning Velocity'
        }
        
        newlyCompleted.forEach(topic => {
          toast({
            title: "✅ Topic Analyzed",
            description: `${topicLabels[topic] || topic} has been covered!`,
            duration: 3000,
          })
        })
      }
      
      setCompletedTopics(newTopics)
    }
  }, [messages, selectedAgent, completedTopics, toast])

  // Enhanced useEffect for Supabase and Socket.io integration
  useEffect(() => {
    if (!session) return

    // Initialize Socket.io connection
    socket.current = io(apiUrl, {
      query: { founderId }
    })

    // Load messages from Supabase
    const loadMessages = async () => {
      const { data, error } = await supabase
        .from('chat_messages')
        .select('*')
        .eq('founder_id', founderId)
        .eq('agent_type', selectedAgent)
        .order('created_at', { ascending: true })

      if (data && !error) {
        setMessages(data.map(msg => ({ role: msg.role, content: msg.content })))
      }
    }

    loadMessages()

    // Subscribe to real-time updates
    const channel = supabase
      .channel(`chat:${founderId}:${selectedAgent}`)
      .on(
        'postgres_changes',
        {
          event: 'INSERT',
          schema: 'public',
          table: 'chat_messages',
          filter: `founder_id=eq.${founderId}`
        },
        (payload) => {
          const newMessage = payload.new as ChatMessage
          if (newMessage.agent_type === selectedAgent) {
            setMessages(prev => [...prev, { 
              role: newMessage.role, 
              content: newMessage.content 
            }])
          }
        }
      )
      .subscribe()

    // Socket.io event handlers
    socket.current.on('user_typing', (data: { userId: string }) => {
      if (data.userId !== session.user.id) {
        setIsOtherUserTyping(data.userId)
        setTimeout(() => setIsOtherUserTyping(null), 3000)
      }
    })

    // 🎉 Real-time analysis completion handler
    socket.current.on('analysis_ready', (data: { 
      founder_id: string
      analysis: any
      filename: string 
         }) => {
       if (data.founder_id === founderId) {
         // 🎊 Real-time confetti celebration!
         confetti({
           particleCount: 150,
           spread: 90,
           origin: { y: 0.6 }
         })
         
         // Show celebration toast for real-time update
         toast({
           title: "🚀 Analysis Complete!",
           description: `Your document "${data.filename}" has been fully analyzed!`,
           variant: "success" as any,
         })
        
        // Update analysis results for current agent
        const currentAnalysis = data.analysis[selectedAgent as 'Product PM' | 'Shark VC']
        if (currentAnalysis) {
          const analysisMessage = formatAnalysisMessage(currentAnalysis, selectedAgent)
          setMessages(prev => [...prev, { 
            role: 'assistant', 
            content: analysisMessage
          }])
          
          // Auto-expand analysis sections
          if (currentAnalysis.missing_sections) {
            setCompletedTopics(prev => [...prev, ...currentAnalysis.missing_sections.slice(0, 3)])
          }
        }
      }
    })

    return () => {
      supabase.removeChannel(channel)
      socket.current?.disconnect()
    }
  }, [founderId, selectedAgent, session, apiUrl])

  // Feedback tracking useEffect
  useEffect(() => {
    const assistantMessageCount = messages.filter(m => m.role === 'assistant').length
    
    // Show feedback every 3 assistant messages
    if (assistantMessageCount > 0 && 
        assistantMessageCount % 3 === 0 && 
        assistantMessageCount !== lastFeedbackCount) {
      setShowFeedback(true)
      setLastFeedbackCount(assistantMessageCount)
    }
  }, [messages, lastFeedbackCount])

  const handleAgentSelect = (agent: string) => {
    if (agent !== selectedAgent && messages.length > 0) {
      // Optionally clear messages when switching agents
      const shouldSwitch = confirm('Switching agents will start a new conversation. Continue?')
      if (shouldSwitch) {
        setMessages([])
        setCompletedTopics([]) // Reset progress
        setSelectedAgent(agent)
      }
    } else {
      setSelectedAgent(agent)
    }
  }

  // Get next suggested topic
  const getNextSuggestedTopic = () => {
    const rubric = selectedAgent === 'Product PM' 
      ? ['user personas', 'market opportunity', 'product roadmap', 'success metrics', 'competitive landscape']
      : ['your founding team', 'market size (TAM)', 'unit economics', 'competitive advantage', 'use of funds']
    
    const allTopics = selectedAgent === 'Product PM'
      ? ['persona', 'market', 'roadmap', 'metrics', 'competition']
      : ['team', 'market', 'economics', 'competition', 'funding']
    
    // Find first uncovered topic
    const uncoveredIndex = allTopics.findIndex(topic => !completedTopics.includes(topic))
    
    return uncoveredIndex >= 0 ? rubric[uncoveredIndex] : undefined
  }

  const sendMessage = async (message: string) => {
    setMessages(prev => [...prev, { role: 'user', content: message }])
    setIsLoading(true)
    
    try {
      // Store user message in Supabase
      await supabase.from('chat_messages').insert({
        founder_id: founderId,
        agent_type: selectedAgent,
        role: 'user',
        content: message
      })

      // Send to backend
      const response = await fetch(`${apiUrl}/chat`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          founder_id: founderId, 
          message,
          agent_type: selectedAgent
        }),
      })

      if (!response.ok) throw new Error('Failed to send message')
      
      const data = await response.json() as { reply: string }
      
      // Store assistant response in Supabase
      await supabase.from('chat_messages').insert({
        founder_id: founderId,
        agent_type: selectedAgent,
        role: 'assistant',
        content: data.reply
      })

      setMessages(prev => [...prev, { role: 'assistant', content: data.reply }])
      
      // Emit typing indicator via Socket.io
      socket.current?.emit('stop_typing', { founderId })
    } catch (error) {
      console.error('Error sending message:', error)
      toast({
        title: "Error",
        description: "Failed to send message. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  const uploadFile = async (file: File) => {
    const formData = new FormData()
    formData.append('file', file)
    
    try {
      const response = await fetch(`${apiUrl}/upload/${founderId}`, {
        method: 'POST',
        body: formData,
      })
      
      if (!response.ok) throw new Error('Upload failed')
      
      const data = await response.json() as { 
        filename: string
        analysis?: {
          'Product PM'?: any
          'Shark VC'?: any
        }
      }
      
             // 🎉 MAGICAL ANALYSIS RESULTS!
       if (data.analysis) {
         // 🎊 CONFETTI CELEBRATION!
         confetti({
           particleCount: 100,
           spread: 70,
           origin: { y: 0.6 }
         })
         
         // Show confetti/celebration toast
         toast({
           title: "🎉 Document Analyzed!",
           description: "See tailored suggestions below. Your insights are ready!",
           variant: "success" as any,
         })
        
                 // Auto-display analysis results for current agent
         const currentAnalysis = data.analysis[selectedAgent as 'Product PM' | 'Shark VC']
        if (currentAnalysis) {
          const analysisMessage = formatAnalysisMessage(currentAnalysis, selectedAgent)
          setMessages(prev => [...prev, { 
            role: 'assistant', 
            content: analysisMessage
          }])
          
          // Auto-expand analysis sections by setting completed topics
          if (currentAnalysis.missing_sections) {
            setCompletedTopics(prev => [...prev, ...currentAnalysis.missing_sections.slice(0, 3)])
          }
        }
      } else {
        // Fallback if analysis failed
        toast({
          title: "Document Uploaded",
          description: `${data.filename} uploaded successfully! Analysis in progress...`,
          variant: "success" as any,
        })
        
        setMessages(prev => [...prev, { 
          role: 'assistant', 
          content: selectedAgent === 'Product PM'
            ? `I've received your document: ${data.filename}. Let me analyze it through a product lens. What specific product questions should I focus on?`
            : `I've received your pitch deck: ${data.filename}. Let me review it like a VC would. What specific aspects would you like me to focus on?`
        }])
      }
    } catch (error) {
      console.error('Error uploading file:', error)
      toast({
        title: "Error",
        description: "Failed to upload document. Please try again.",
        variant: "destructive",
      })
    }
  }

  if (status === "loading") {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
      </div>
    )
  }

  if (!session) {
    return (
      <div className="flex flex-col min-h-screen">
        <Header />
        <div className="flex-1 flex items-center justify-center p-4">
          <Card className="max-w-md w-full p-8 text-center animate-fade-up">
            <div className="mb-6">
              <div className="p-4 rounded-full bg-gradient-to-br from-blue-600/20 to-purple-600/20 w-fit mx-auto mb-4">
                <Github className="h-12 w-12 text-primary" />
              </div>
              <h2 className="text-2xl font-bold mb-2">Welcome to Starknet Founders Bot</h2>
              <p className="text-muted-foreground">
                Sign in with GitHub to get brutally honest feedback on your startup pitch
              </p>
            </div>
            <Button 
              onClick={() => signIn("github")} 
              variant="gradient" 
              size="lg"
              className="w-full gap-2"
            >
              <Github className="h-5 w-5" />
              Sign in with GitHub
            </Button>
          </Card>
        </div>
      </div>
    )
  }

  return (
    <div className="flex flex-col min-h-screen">
      <Header />
      
      {showOnboarding && messages.length === 0 && (
        <OnboardingGuide onClose={() => setShowOnboarding(false)} />
      )}
      
      <main className="flex-1 flex flex-col max-w-6xl mx-auto w-full">
        <AgentSelector 
          selectedAgent={selectedAgent} 
          onSelect={handleAgentSelect}  // Use the new handler
        />
        
        {/* Desktop layout with progress sidebar */}
        <div className="flex-1 flex gap-4 mx-4 mb-4">
          {/* Chat area */}
          <Card className="flex-1 flex flex-col overflow-hidden">
            <ChatInterface 
              messages={messages} 
              isLoading={isLoading}
              selectedAgent={selectedAgent}  // Add this prop
            />
          </Card>
          
          {/* Progress sidebar - visible on desktop */}
          {messages.length > 0 && (
            <div className="hidden lg:block w-80 space-y-4">
              <ProgressIndicators 
                selectedAgent={selectedAgent}
                completedItems={completedTopics}
                className="sticky top-4"
              />
              
              <SmartSuggestions
                founderId={founderId}
                selectedAgent={selectedAgent}
                onActionClick={(action) => sendMessage(action)}
              />
              
              <AdaptiveQuestions
                missingSections={missingSections}
                selectedAgent={selectedAgent}
                founderContext="starknet founder"
                onQuestionSelect={(question) => sendMessage(question)}
              />
            </div>
          )}
        </div>
        
        {/* Mobile progress - shows as collapsible */}
        {messages.length > 0 && (
          <div className="lg:hidden mx-4 mb-4">
            <details className="group">
              <summary className="cursor-pointer list-none">
                <div className="flex items-center justify-between p-3 bg-secondary/50 rounded-lg">
                  <span className="text-sm font-medium">Analysis Progress</span>
                  <span className="text-xs text-muted-foreground">
                    {completedTopics.length}/10 • Tap to expand
                  </span>
                </div>
              </summary>
              <div className="mt-2">
                <ProgressIndicators 
                  selectedAgent={selectedAgent}
                  completedItems={completedTopics}
                />
              </div>
            </details>
          </div>
        )}
      </main>
      
      <MessageInput
        onSendMessage={sendMessage}
        onUploadFile={uploadFile}
        isLoading={isLoading}
        suggestedTopic={messages.length > 2 ? getNextSuggestedTopic() : undefined}
      />
      
      <FeedbackModal
        open={showFeedback}
        onClose={() => setShowFeedback(false)}
        onSubmit={async (feedback, rating) => {
          try {
            await supabase.from('feedback').insert({
              founder_id: founderId,
              content: feedback,
              rating: rating,
              agent_type: selectedAgent
            })
            
            // Track with PostHog if initialized
            if (typeof window !== 'undefined' && (window as any).posthog) {
              posthog.capture('feedback_submitted', {
                rating,
                has_comment: feedback.length > 0,
                agent_type: selectedAgent
              })
            }
            
            toast({
              title: "Thanks for your feedback!",
              description: "Your input helps us improve.",
              variant: "success" as any,
            })
          } catch (error) {
            console.error('Error submitting feedback:', error)
          }
        }}
      />
    </div>
  )
} 
---

## FILE: frontend/app/not-found.tsx
export default function NotFound() {
  return (
    <div className="flex items-center justify-center min-h-screen">
      <div className="text-center">
        <h1 className="text-4xl font-bold mb-4">404</h1>
        <p className="text-muted-foreground">Page not found</p>
      </div>
    </div>
  )
} 
---

## FILE: frontend/app/providers.tsx
"use client"

import { SessionProvider } from "next-auth/react"
import { Toaster } from "@/app/components/ui/toaster"
import type { ReactNode } from "react"

export default function Providers({ children }: { children: ReactNode }) {
  return (
    <SessionProvider>
      {children}
      <Toaster />
    </SessionProvider>
  )
} 
---

## FILE: frontend/next.config.js
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'avatars.githubusercontent.com',
        port: '',
        pathname: '/**',
      },
    ],
  },
}

module.exports = nextConfig

---

## FILE: frontend/next-env.d.ts
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.

---

## FILE: frontend/tailwind.config.ts
import type { Config } from 'tailwindcss'

const config: Config = {
  darkMode: ["class"],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
        "fade-in": {
          "0%": { opacity: "0", transform: "translateY(10px)" },
          "100%": { opacity: "1", transform: "translateY(0)" },
        },
        "fade-up": {
          "0%": { opacity: "0", transform: "translateY(20px)" },
          "100%": { opacity: "1", transform: "translateY(0)" },
        },
        "zoom-in-50": {
          "0%": { opacity: "0", transform: "scale(0.5)" },
          "100%": { opacity: "1", transform: "scale(1)" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        "fade-in": "fade-in 0.5s ease-out",
        "fade-up": "fade-up 0.5s ease-out",
        "in": "fade-in 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}

export default config

---

## FILE: frontend/components/agent-selector.tsx
"use client"

import { Button } from "@/app/components/ui/button"
import { cn } from "@/app/lib/utils"
import { Briefcase, Lock } from "lucide-react"
import { SharkIcon, BrainIcon } from "./custom-icons"

const AGENTS = [
  { 
    name: 'Product PM', 
    available: true, 
    icon: BrainIcon,
    description: 'Start here - Product strategy insights',
    gradient: 'from-blue-600 to-cyan-600',
    bgGradient: 'from-blue-600/10 to-cyan-600/10',
    basedOn: 'Based on Lenny Rachitsky'
  },
  { 
    name: 'Shark VC', 
    available: true, 
    icon: SharkIcon,
    description: 'Next step - Brutal investor feedback',
    gradient: 'from-red-600 to-orange-600',
    bgGradient: 'from-red-600/10 to-orange-600/10',
    basedOn: 'Based on top VCs from Sequoia, a16z, YC'
  }
]

interface AgentSelectorProps {
  selectedAgent: string
  onSelect: (agent: string) => void
}

export default function AgentSelector({ selectedAgent, onSelect }: AgentSelectorProps) {
  return (
    <div className="w-full p-6 md:p-8">
      <h2 className="text-center text-sm font-medium text-muted-foreground mb-6">
        Choose your advisor personality
      </h2>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 max-w-3xl mx-auto">
        {AGENTS.map((agent) => {
          const Icon = agent.icon
          const isSelected = selectedAgent === agent.name
          
          return (
            <Button
              key={agent.name}
              onClick={() => agent.available && onSelect(agent.name)}
              variant="outline"
              className={cn(
                "relative h-auto p-6 flex flex-col items-center gap-4 transition-all duration-300 group card-hover",
                isSelected && "border-primary shadow-xl shadow-primary/20 scale-[1.02]",
                !agent.available && "opacity-50 cursor-not-allowed"
              )}
              disabled={!agent.available}
            >
              <div className={cn(
                "absolute inset-0 rounded-lg opacity-10 transition-opacity duration-300",
                `bg-gradient-to-br ${agent.bgGradient}`,
                isSelected && "opacity-20"
              )} />
              
              {!agent.available && (
                <Lock className="absolute top-3 right-3 h-4 w-4 text-muted-foreground" />
              )}
              
              <div className={cn(
                "p-4 rounded-xl transition-all duration-300",
                isSelected 
                  ? `bg-gradient-to-br ${agent.gradient} shadow-lg` 
                  : "bg-secondary group-hover:bg-secondary/70"
              )}>
                <Icon className={cn(
                  "h-8 w-8 transition-transform duration-300 group-hover:scale-110",
                  isSelected ? "text-white" : "text-muted-foreground"
                )} />
              </div>
              
              <div className="text-center z-10">
                <h3 className="font-semibold text-lg">{agent.name}</h3>
                <p className="text-sm text-muted-foreground mt-1">
                  {agent.available ? agent.description : "Coming soon"}
                </p>
                <p className="text-xs text-muted-foreground/70 mt-2 italic">
                  {agent.basedOn}
                </p>
              </div>
              
              {agent.name === 'Product PM' && (
                <div className="absolute -top-2 -right-2 bg-gradient-to-r from-starknet-teal to-starknet-purple text-white text-xs px-3 py-1 rounded-full shadow-lg animate-pulse">
                  Start here
                </div>
              )}
            </Button>
          )
        })}
      </div>
    </div>
  )
} 
---

## FILE: frontend/components/chat-interface.tsx
"use client"

import { useEffect, useRef } from "react"
import { cn } from "@/app/lib/utils"
import { Bot, User } from "lucide-react"
import { SharkIcon, BrainIcon } from "./custom-icons"

interface Message {
  role: 'user' | 'assistant'
  content: string
}

interface ChatInterfaceProps {
  messages: Message[]
  isLoading: boolean
  selectedAgent?: string
}

export default function ChatInterface({ messages, isLoading, selectedAgent = 'Shark VC' }: ChatInterfaceProps) {
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const getAgentIcon = () => {
    if (selectedAgent === 'Product PM') {
      return <BrainIcon className="h-5 w-5" />
    }
    return <SharkIcon className="h-5 w-5" />
  }

  const getAgentColor = () => {
    return selectedAgent === 'Product PM' 
      ? 'from-blue-600/20 to-cyan-600/20' 
      : 'from-red-600/20 to-orange-600/20'
  }

  return (
    <div className="flex-1 overflow-y-auto p-4 md:p-6 space-y-6">
      {messages.length === 0 && (
        <div className="flex flex-col items-center justify-center h-full text-center animate-slide-up">
          <div className={cn(
            "p-6 rounded-full bg-gradient-to-br mb-6 animate-pulse-glow",
            getAgentColor()
          )}>
            {getAgentIcon()}
          </div>
          <h3 className="text-xl font-semibold mb-2">
            {selectedAgent === 'Product PM' ? 'Ready to refine your product?' : 'Ready for investor feedback?'}
          </h3>
          <p className="text-muted-foreground max-w-md text-sm leading-relaxed">
            {selectedAgent === 'Product PM' 
              ? "Upload your PRD or describe your product. I'll help you refine your product strategy with frameworks from top tech companies."
              : "Upload your pitch deck. I'll analyze it like a top-tier VC would, focusing on what matters for fundraising."
            }
          </p>
        </div>
      )}
      
      {messages.map((message, index) => (
        <div
          key={index}
          className={cn(
            "flex gap-3 animate-slide-up",
            message.role === 'user' ? 'justify-end' : 'justify-start'
          )}
          style={{ animationDelay: `${index * 50}ms` }}
        >
          {message.role === 'assistant' && (
            <div className="flex-shrink-0">
              <div className={cn(
                "p-2.5 rounded-full bg-gradient-to-br shadow-lg",
                getAgentColor()
              )}>
                {getAgentIcon()}
              </div>
            </div>
          )}
          
          <div
            className={cn(
              "max-w-[70%] rounded-2xl px-5 py-3.5 shadow-sm",
              message.role === 'user' 
                ? 'bg-gradient-to-br from-blue-600 to-purple-600 text-white' 
                : 'bg-secondary/60 backdrop-blur-sm border border-border/50'
            )}
          >
            <p className="text-sm leading-relaxed whitespace-pre-wrap">
              {message.content}
            </p>
          </div>
          
          {message.role === 'user' && (
            <div className="flex-shrink-0">
              <div className="p-2.5 rounded-full bg-gradient-to-br from-blue-600 to-purple-600 shadow-lg">
                <User className="h-5 w-5 text-white" />
              </div>
            </div>
          )}
        </div>
      ))}
      
      {isLoading && (
        <div className="flex gap-3 justify-start animate-slide-up">
          <div className="flex-shrink-0">
            <div className={cn(
              "p-2.5 rounded-full bg-gradient-to-br shadow-lg",
              getAgentColor()
            )}>
              {getAgentIcon()}
            </div>
          </div>
          <div className="bg-secondary/60 backdrop-blur-sm border border-border/50 rounded-2xl px-5 py-3.5">
            <div className="flex items-center gap-3">
              <div className="flex gap-1.5">
                <div className="w-2 h-2 bg-primary/60 rounded-full animate-bounce" style={{ animationDelay: '0ms' }} />
                <div className="w-2 h-2 bg-primary/60 rounded-full animate-bounce" style={{ animationDelay: '150ms' }} />
                <div className="w-2 h-2 bg-primary/60 rounded-full animate-bounce" style={{ animationDelay: '300ms' }} />
              </div>
              {selectedAgent === 'Shark VC' && (
                <span className="text-xs text-muted-foreground">Researching market data...</span>
              )}
            </div>
          </div>
        </div>
      )}
      
      <div ref={messagesEndRef} />
    </div>
  )
} 
---

## FILE: frontend/components/onboarding-guide.tsx
"use client"

import { Card, CardContent } from "@/app/components/ui/card"
import { Button } from "@/app/components/ui/button"
import { X, FileText, MessageSquare, CheckCircle, AlertCircle } from "lucide-react"
import { useState } from "react"

interface OnboardingGuideProps {
  onClose: () => void
}

export default function OnboardingGuide({ onClose }: OnboardingGuideProps) {
  const [isMinimized, setIsMinimized] = useState(false)

  if (isMinimized) {
    return (
      <div className="fixed bottom-20 right-4 z-40">
        <Button 
          onClick={() => setIsMinimized(false)}
          variant="outline"
          size="sm"
          className="gap-2"
        >
          <AlertCircle className="h-4 w-4" />
          Show Guide
        </Button>
      </div>
    )
  }

  return (
    <div className="fixed inset-x-0 top-20 mx-auto max-w-2xl p-4 z-40">
      <Card className="relative border-primary/20 shadow-lg animate-fade-up">
        <div className="absolute right-2 top-2 flex gap-1">
          <Button
            onClick={() => setIsMinimized(true)}
            variant="ghost"
            size="icon"
            className="h-8 w-8"
          >
            <span className="text-xs">−</span>
          </Button>
          <Button
            onClick={onClose}
            variant="ghost"
            size="icon"
            className="h-8 w-8"
          >
            <X className="h-4 w-4" />
          </Button>
        </div>
        
        <CardContent className="pt-6 pb-4">
          <h3 className="text-lg font-semibold mb-4">Welcome to Starknet Founders Bot</h3>
          
          <div className="space-y-4">
            <div className="bg-primary/5 rounded-lg p-4">
              <h4 className="font-medium text-sm mb-2 flex items-center gap-2">
                <span className="text-lg">👋</span> Getting Started
              </h4>
              <p className="text-sm text-muted-foreground">
                This tool helps Starknet ecosystem founders refine their ideas through structured feedback.
                We've carefully curated two advisor personalities to guide you through product development and fundraising.
              </p>
            </div>

            <div className="space-y-3">
              <h4 className="font-medium text-sm">Recommended Process:</h4>
              
              <div className="flex gap-3">
                <div className="flex-shrink-0 w-8 h-8 rounded-full bg-blue-600/10 flex items-center justify-center text-sm font-medium">
                  1
                </div>
                <div className="flex-1">
                  <h5 className="font-medium text-sm">Start with Product Strategy</h5>
                  <p className="text-xs text-muted-foreground mt-1">
                    Upload your PRD or describe your product. Our Product advisor (based on Lenny Rachitsky) 
                    will help you nail product-market fit, user personas, and your roadmap.
                  </p>
                </div>
              </div>

              <div className="flex gap-3">
                <div className="flex-shrink-0 w-8 h-8 rounded-full bg-red-600/10 flex items-center justify-center text-sm font-medium">
                  2
                </div>
                <div className="flex-1">
                  <h5 className="font-medium text-sm">Then Face the VCs</h5>
                  <p className="text-xs text-muted-foreground mt-1">
                    Upload your pitch deck. Our VC advisor (based on top partners from Sequoia, a16z, YC) 
                    will stress-test your assumptions and prepare you for real investor meetings.
                  </p>
                </div>
              </div>
            </div>

            <div className="bg-secondary/50 rounded-lg p-3">
              <h4 className="font-medium text-sm mb-1 flex items-center gap-2">
                <FileText className="h-4 w-4" />
                Important: Upload First
              </h4>
              <p className="text-xs text-muted-foreground">
                For best results, always upload your PRD or pitch deck first. 
                The advisors will analyze your document and identify gaps to fill.
              </p>
            </div>

            <div className="text-xs text-muted-foreground text-center pt-2 border-t">
              <p>A Starknet Foundation program to support ecosystem startups</p>
              <p>Issues or feedback? Contact <span className="text-primary font-medium">@espejelomar</span> on Telegram</p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
} 
---

## FILE: frontend/components/custom-icons.tsx
export const SharkIcon = ({ className }: { className?: string }) => (
  <svg className={className} viewBox="0 0 24 24" fill="currentColor">
    <path d="M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zm0 2c1.5 0 3 .5 4.2 1.3L14 7.5c-.5-.3-1.2-.5-2-.5s-1.5.2-2 .5L7.8 5.3C9 4.5 10.5 4 12 4zm-5 6c.3 0 .7.1 1 .3l2 1.2v2.3l-2 1.2c-.3.2-.7.3-1 .3-1.1 0-2-.9-2-2s.9-2 2-2zm10 0c1.1 0 2 .9 2 2s-.9 2-2 2c-.3 0-.7-.1-1-.3l-2-1.2v-2.3l2-1.2c.3-.2.7-.3 1-.3zm-5 4.5l1.5.9c.5.3 1 .5 1.5.6v2.8c-1 .2-2 .2-3 0V16c.5-.1 1-.3 1.5-.6l1.5-.9z"/>
  </svg>
)

export const BrainIcon = ({ className }: { className?: string }) => (
  <svg className={className} viewBox="0 0 24 24" fill="currentColor">
    <path d="M12 2C9.5 2 7.4 3.4 6.5 5.4 4.5 5.9 3 7.7 3 10c0 1.3.5 2.5 1.4 3.4-.9 1-1.4 2.3-1.4 3.6 0 3.3 2.7 6 6 6 1.4 0 2.7-.5 3.7-1.3.7.8 1.7 1.3 2.8 1.3 2.2 0 4-1.8 4-4 0-.8-.2-1.5-.6-2.1 1.3-1 2.1-2.6 2.1-4.4 0-3-2.5-5.5-5.5-5.5-.4 0-.8.1-1.2.2C13.9 4.3 13 2 12 2zm0 2c.8 0 1.5 1.1 1.5 2.5S12.8 9 12 9s-1.5-1.1-1.5-2.5S11.2 4 12 4zm-4.5 3c.8 0 1.5.7 1.5 1.5S8.3 10 7.5 10 6 9.3 6 8.5 6.7 7 7.5 7zm9 0c1.9 0 3.5 1.6 3.5 3.5 0 1.2-.6 2.3-1.6 2.9l-.9.6.5 1c.3.5.5 1.1.5 1.7 0 1.4-1.1 2.5-2.5 2.5s-2.5-1.1-2.5-2.5V17h-2v1.5c0 2.5-2 4.5-4.5 4.5S3 21 3 18.5 5 14 7.5 14H9v-2H7.5C5.6 12 4 10.4 4 8.5S5.6 5 7.5 5c.2 0 .3 0 .5.1l1 .2.3-1C9.8 2.9 10.8 2 12 2c1.2 0 2.2.9 2.7 2.3l.3 1 1-.2c.2-.1.3-.1.5-.1z"/>
  </svg>
) 
---

## FILE: frontend/components/adaptive-questions.tsx
"use client"

import { useState, useEffect, useRef } from 'react'
import { Card, CardHeader, CardTitle, CardContent } from '@/app/components/ui/card'
import { Button } from '@/app/components/ui/button'
import { Badge } from '@/app/components/ui/badge'
import { MessageCircle, Send, ChevronRight, AlertTriangle } from 'lucide-react'

interface AdaptiveQuestion {
  section: string
  question: string
  alternatives: string[]
  priority: number
}

interface AdaptiveQuestionsProps {
  missingSections: string[]
  selectedAgent: string
  founderContext: string
  onQuestionSelect: (question: string) => void
}

export default function AdaptiveQuestions({ 
  missingSections, 
  selectedAgent, 
  founderContext, 
  onQuestionSelect 
}: AdaptiveQuestionsProps) {
  const [questions, setQuestions] = useState<AdaptiveQuestion[]>([])
  const [isLoading, setIsLoading] = useState(false)
  const [expandedQuestion, setExpandedQuestion] = useState<number | null>(null)
  const [error, setError] = useState<string | null>(null)
  const [rateLimited, setRateLimited] = useState(false)
  const apiUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'
  
  // Debouncing and request deduplication
  const debounceRef = useRef<NodeJS.Timeout | null>(null)
  const lastRequestPayloadRef = useRef<string>('')
  const abortControllerRef = useRef<AbortController | null>(null)

  useEffect(() => {
    const fetchQuestions = async () => {
      if (missingSections.length === 0) return

      // Create request payload for comparison
      const requestPayload = JSON.stringify({
        missing_sections: missingSections,
        agent_type: selectedAgent,
        founder_context: founderContext,
        document_content: ""
      })

      // Skip if this is the same request as last time (deduplication)
      if (requestPayload === lastRequestPayloadRef.current) {
        return
      }

      // Cancel any previous request
      if (abortControllerRef.current) {
        abortControllerRef.current.abort()
      }

      // Clear any existing debounce
      if (debounceRef.current) {
        clearTimeout(debounceRef.current)
      }

      // Debounce the API call
      debounceRef.current = setTimeout(async () => {
        setIsLoading(true)
        setError(null)
        setRateLimited(false)

        // Create new abort controller for this request
        abortControllerRef.current = new AbortController()
        
        try {
          const response = await fetch(`${apiUrl}/adaptive-questions`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: requestPayload,
            signal: abortControllerRef.current.signal
          })

          if (response.status === 429) {
            setRateLimited(true)
            setError('You\'re making requests too quickly. Please wait a few seconds and try again.')
            return
          }

          if (response.ok) {
            const data = await response.json()
            setQuestions(data.questions || [])
            lastRequestPayloadRef.current = requestPayload // Remember this successful request
          } else {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`)
          }
        } catch (error: any) {
          if (error.name === 'AbortError') {
            // Request was cancelled, this is normal
            return
          }
          console.error('Failed to fetch adaptive questions:', error)
          setError('Failed to load questions. Please try again.')
        } finally {
          setIsLoading(false)
        }
      }, 500) // 500ms debounce delay
    }

    fetchQuestions()

    // Cleanup function
    return () => {
      if (debounceRef.current) {
        clearTimeout(debounceRef.current)
      }
      if (abortControllerRef.current) {
        abortControllerRef.current.abort()
      }
    }
  }, [missingSections, selectedAgent, founderContext, apiUrl])

  // Auto-retry after rate limit cooldown
  useEffect(() => {
    if (rateLimited) {
      const retryTimer = setTimeout(() => {
        setRateLimited(false)
        setError(null)
        // Trigger a refetch by clearing the last payload
        lastRequestPayloadRef.current = ''
      }, 30000) // Retry after 30 seconds

      return () => clearTimeout(retryTimer)
    }
  }, [rateLimited])

  // Show error state
  if (error) {
    return (
      <Card className="mb-4 border-orange-200 bg-orange-50 dark:border-orange-800 dark:bg-orange-950">
        <CardContent className="p-4">
          <div className="flex items-center gap-2 text-orange-700 dark:text-orange-300">
            <AlertTriangle className="h-4 w-4" />
            <span className="text-sm font-medium">
              {rateLimited ? 'Rate Limited' : 'Error Loading Questions'}
            </span>
          </div>
          <p className="text-sm text-orange-600 dark:text-orange-400 mt-1">{error}</p>
          {rateLimited && (
            <p className="text-xs text-orange-500 dark:text-orange-500 mt-2">
              Retrying automatically in a few seconds...
            </p>
          )}
        </CardContent>
      </Card>
    )
  }

  if (isLoading || questions.length === 0) return null

  const getSectionColor = (section: string) => {
    if (section.includes('team') || section.includes('traction')) return 'bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-300'
    if (section.includes('market') || section.includes('economics')) return 'bg-yellow-100 text-yellow-700 dark:bg-yellow-900 dark:text-yellow-300'
    return 'bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300'
  }

  return (
    <Card className="mb-4 card-hover bg-gradient-to-br from-background to-secondary/20 border-border/50">
      <CardHeader>
        <CardTitle className="flex items-center gap-2 text-sm">
          <MessageCircle className="h-4 w-4 text-primary" />
          Key Questions to Address
          <Badge variant="secondary" className="ml-auto">
            {questions.length} priority questions
          </Badge>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-3">
        {questions.map((question, index) => (
          <div key={index} className="border rounded-lg p-3 hover:bg-secondary/30 transition-colors">
            <div className="flex items-start justify-between mb-2">
              <Badge 
                variant="outline" 
                className={`text-xs ${getSectionColor(question.section)}`}
              >
                Priority {question.priority}
              </Badge>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setExpandedQuestion(expandedQuestion === index ? null : index)}
                className="h-6 w-6 p-0"
              >
                <ChevronRight className={`h-3 w-3 transition-transform ${
                  expandedQuestion === index ? 'rotate-90' : ''
                }`} />
              </Button>
            </div>
            
            <p className="text-sm mb-3 leading-relaxed">{question.question}</p>
            
            <div className="flex items-center justify-between">
              <span className="text-xs text-muted-foreground capitalize">
                {question.section.replace(/_/g, ' ')}
              </span>
              <Button
                variant="outline"
                size="sm"
                onClick={() => onQuestionSelect(question.question)}
                className="gap-1 h-7 text-xs"
              >
                <Send className="h-3 w-3" />
                Ask This
              </Button>
            </div>
            
            {expandedQuestion === index && question.alternatives.length > 0 && (
              <div className="mt-3 pt-3 border-t border-secondary">
                <p className="text-xs font-medium text-muted-foreground mb-2">
                  Alternative questions:
                </p>
                <div className="space-y-2">
                  {question.alternatives.map((alt, altIndex) => (
                    <div key={altIndex} className="flex items-start justify-between gap-2">
                      <p className="text-xs text-muted-foreground flex-1">{alt}</p>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => onQuestionSelect(alt)}
                        className="h-6 w-6 p-0 flex-shrink-0"
                      >
                        <Send className="h-3 w-3" />
                      </Button>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        ))}
        
        <div className="pt-2 border-t">
          <p className="text-xs text-muted-foreground">
            💡 These questions are generated based on gaps identified in your pitch. 
            Addressing them will strengthen your {selectedAgent === 'Shark VC' ? 'investor presentation' : 'product strategy'}.
          </p>
        </div>
      </CardContent>
    </Card>
  )
} 
---

## FILE: frontend/components/feedback-modal.tsx
"use client"

import { useState } from 'react'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/app/components/ui/dialog'
import { Textarea } from '@/app/components/ui/textarea'
import { Button } from '@/app/components/ui/button'
import { Star } from 'lucide-react'

interface FeedbackModalProps {
  open: boolean
  onClose: () => void
  onSubmit: (feedback: string, rating: number) => void
}

export default function FeedbackModal({ open, onClose, onSubmit }: FeedbackModalProps) {
  const [feedback, setFeedback] = useState('')
  const [rating, setRating] = useState(0)

  const handleSubmit = () => {
    if (feedback.trim() || rating > 0) {
      onSubmit(feedback, rating)
      setFeedback('')
      setRating(0)
    }
    onClose()
  }

  return (
    <Dialog open={open} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[425px] card-hover bg-gradient-to-br from-background to-secondary/20 border-border/50">
        <DialogHeader>
          <DialogTitle className="bg-gradient-to-r from-primary to-starknet-teal bg-clip-text text-transparent">
            Quick Feedback
          </DialogTitle>
          <DialogDescription>
            Help us improve! How's your experience so far?
          </DialogDescription>
        </DialogHeader>
        
        <div className="space-y-4 py-4">
          <div className="flex justify-center gap-2">
            {[1, 2, 3, 4, 5].map((star) => (
              <button
                key={star}
                onClick={() => setRating(star)}
                className="transition-all hover:scale-110"
              >
                <Star
                  className={`h-8 w-8 ${
                    star <= rating 
                      ? 'fill-yellow-400 text-yellow-400' 
                      : 'text-gray-300'
                  }`}
                />
              </button>
            ))}
          </div>
          
          <Textarea
            value={feedback}
            onChange={(e) => setFeedback(e.target.value)}
            placeholder="What could we improve? (optional)"
            rows={3}
            className="bg-secondary/50 border-border/50"
          />
        </div>
        
        <div className="flex justify-end gap-2">
          <Button variant="ghost" onClick={onClose}>
            Not now
          </Button>
          <Button onClick={handleSubmit} className="btn-starknet">
            Submit
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  )
} 
---

## FILE: frontend/components/header.tsx
"use client"

import { signIn, signOut, useSession } from "next-auth/react"
import { Button } from "@/app/components/ui/button"
import { Github, LogOut, Sparkles } from "lucide-react"
import Image from "next/image"

export default function Header() {
  const { data: session } = useSession()

  return (
    <header className="border-b border-border/50 backdrop-blur-sm bg-background/80 sticky top-0 z-50">
      <div className="container mx-auto px-4 py-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <div className="flex items-center gap-2">
              <div className="p-2 rounded-lg bg-gradient-to-br from-blue-600 to-purple-600">
                <Sparkles className="h-6 w-6 text-white" />
              </div>
              <div>
                <h1 className="text-2xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
                  Starknet Founders Bot
                </h1>
                <p className="text-xs text-muted-foreground">A Starknet Foundation program</p>
              </div>
            </div>
            <div className="hidden md:block text-xs text-muted-foreground/70 border-l pl-4 ml-2">
              <p>Supporting ecosystem startups</p>
              <p>Issues? Contact <span className="text-primary">@espejelomar</span> on Telegram</p>
            </div>
          </div>
          
          {session?.user ? (
            <div className="flex items-center gap-4">
              <div className="flex items-center gap-3">
                <Image
                  src={session.user.image || ""}
                  alt="Profile"
                  width={40}
                  height={40}
                  className="rounded-full border-2 border-primary/20"
                />
                <div className="hidden sm:block">
                  <p className="text-sm font-medium">{session.user.name}</p>
                  <p className="text-xs text-muted-foreground">{session.user.email}</p>
                </div>
              </div>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => signOut()}
                className="gap-2"
              >
                <LogOut className="h-4 w-4" />
                Sign Out
              </Button>
            </div>
          ) : (
            <Button
              onClick={() => signIn("github")}
              variant="gradient"
              className="gap-2"
            >
              <Github className="h-4 w-4" />
              Sign in with GitHub
            </Button>
          )}
        </div>
      </div>
    </header>
  )
} 
---

## FILE: frontend/components/message-input.tsx
"use client"

import { useState, useRef } from 'react'
import { Button } from "@/app/components/ui/button"
import { Textarea } from "@/app/components/ui/textarea"
import { Paperclip, Send } from "lucide-react"
import { cn } from "@/app/lib/utils"

interface MessageInputProps {
  onSendMessage: (message: string) => void
  onUploadFile: (file: File) => void
  isLoading: boolean
  suggestedTopic?: string  // Add this
}

export default function MessageInput({ onSendMessage, onUploadFile, isLoading, suggestedTopic }: MessageInputProps) {
  const [message, setMessage] = useState('')
  const fileInputRef = useRef<HTMLInputElement>(null)

  const handleSend = (e: React.FormEvent) => {
    e.preventDefault()
    if (!message.trim() || isLoading) return
    onSendMessage(message)
    setMessage('')
  }

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (file && file.type === 'application/pdf') {
      onUploadFile(file)
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSend(e)
    }
  }

  return (
    <form onSubmit={handleSend} className="border-t border-border/50 bg-background/80 backdrop-blur-sm p-4">
      <div className="container mx-auto max-w-4xl">
        {/* Add suggested topic hint */}
        {suggestedTopic && (
          <div className="mb-2 text-xs text-muted-foreground flex items-center gap-2">
            <span>💡 Try asking about:</span>
            <button
              type="button"
              onClick={() => setMessage(`Tell me about ${suggestedTopic}`)}
              className="text-primary hover:underline"
            >
              {suggestedTopic}
            </button>
          </div>
        )}
        
        <div className="relative">
          <Textarea
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder="Describe your startup idea or ask for feedback..."
            className="min-h-[80px] pr-24 resize-none"
            disabled={isLoading}
          />
          <div className="absolute bottom-2 right-2 flex gap-2">
            <Button
              type="button"
              size="icon"
              variant="ghost"
              onClick={() => fileInputRef.current?.click()}
              disabled={isLoading}
              className="h-8 w-8"
            >
              <Paperclip className="h-4 w-4" />
            </Button>
            <Button
              type="submit"
              size="icon"
              variant={message.trim() ? "gradient" : "ghost"}
              disabled={isLoading || !message.trim()}
              className={cn(
                "h-8 w-8",
                message.trim() && "hover:scale-110"
              )}
            >
              <Send className="h-4 w-4" />
            </Button>
          </div>
        </div>
        <div className="mt-2 flex items-center justify-between text-xs text-muted-foreground">
          <p>Press Enter to send, Shift+Enter for new line</p>
          <p>PDF files only (max 10MB)</p>
        </div>
      </div>
      <input
        ref={fileInputRef}
        type="file"
        accept=".pdf"
        className="hidden"
        onChange={handleFileChange}
        disabled={isLoading}
      />
    </form>
  )
} 
---

## FILE: frontend/components/progress-indicators.tsx
"use client"

import { Check, Circle, Trophy } from "lucide-react"
import { cn } from "@/app/lib/utils"
import { useEffect, useState } from "react"
import confetti from 'canvas-confetti'

interface RubricItem {
  id: string
  label: string
  completed: boolean
}

const SHARK_VC_RUBRIC: RubricItem[] = [
  { id: 'team', label: 'Team & Founders', completed: false },
  { id: 'market', label: 'Market Size (TAM)', completed: false },
  { id: 'problem', label: 'Problem/Solution Fit', completed: false },
  { id: 'traction', label: 'Traction & Metrics', completed: false },
  { id: 'economics', label: 'Unit Economics', completed: false },
  { id: 'competition', label: 'Competitive Advantage', completed: false },
  { id: 'model', label: 'Business Model', completed: false },
  { id: 'funding', label: 'Use of Funds', completed: false },
  { id: 'exit', label: 'Exit Strategy', completed: false },
  { id: 'risks', label: 'Risks & Mitigation', completed: false },
]

const PRODUCT_PM_RUBRIC: RubricItem[] = [
  { id: 'market', label: 'Market Clarity', completed: false },
  { id: 'persona', label: 'User Persona & JTBD', completed: false },
  { id: 'problem', label: 'Problem Statement', completed: false },
  { id: 'solution', label: 'Solution Uniqueness', completed: false },
  { id: 'roadmap', label: 'Roadmap & Prioritization', completed: false },
  { id: 'metrics', label: 'Success Metrics', completed: false },
  { id: 'mvp', label: 'MVP → MLP Journey', completed: false },
  { id: 'narrative', label: 'Product Narrative', completed: false },
  { id: 'experiments', label: 'Learning Velocity', completed: false },
]

interface ProgressIndicatorsProps {
  selectedAgent: string
  completedItems: string[]
  className?: string
}

export default function ProgressIndicators({ selectedAgent, completedItems, className }: ProgressIndicatorsProps) {
  const rubric = selectedAgent === 'Product PM' ? PRODUCT_PM_RUBRIC : SHARK_VC_RUBRIC
  const completedCount = completedItems.length
  const totalCount = rubric.length
  const percentage = (completedCount / totalCount) * 100
  const [hasCompletedAll, setHasCompletedAll] = useState(false)

  useEffect(() => {
    if (percentage === 100 && !hasCompletedAll) {
      setHasCompletedAll(true)
      // Trigger confetti
      confetti({
        particleCount: 100,
        spread: 70,
        origin: { y: 0.6 },
        colors: ['#00ffff', '#ff00ff', '#ffff00']
      })
    }
  }, [percentage, hasCompletedAll])

  return (
    <div className={cn("bg-gradient-to-br from-secondary/50 to-secondary/30 rounded-xl p-5 backdrop-blur-sm border border-border/50 card-hover", className)}>
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-base font-semibold bg-gradient-to-r from-primary to-starknet-teal bg-clip-text text-transparent">
          Analysis Progress
        </h3>
        <span className="text-xs text-muted-foreground font-medium">
          {completedCount}/{totalCount} completed
        </span>
      </div>
      
      {/* Progress bar with gradient fill */}
      <div className="w-full bg-secondary/70 rounded-full h-2.5 mb-5 overflow-hidden">
        <div 
          className="h-full bg-gradient-to-r from-blue-600 via-starknet-teal to-purple-600 transition-all duration-700 ease-out rounded-full"
          style={{ 
            width: `${percentage}%`,
            boxShadow: percentage > 0 ? '0 0 10px rgba(0, 255, 255, 0.5)' : 'none'
          }}
        />
      </div>

      {/* Rubric items with enhanced animations */}
      <div className="grid grid-cols-1 gap-2.5">
        {rubric.map((item, index) => {
          const isCompleted = completedItems.includes(item.id)
          return (
            <div 
              key={item.id} 
              className={cn(
                "flex items-center gap-3 text-xs transition-all duration-300 p-2 rounded-lg",
                isCompleted 
                  ? "text-foreground bg-primary/10" 
                  : "text-muted-foreground hover:bg-secondary/30"
              )}
              style={{
                animationDelay: isCompleted ? `${index * 50}ms` : '0ms'
              }}
            >
              <div className="relative">
                {isCompleted ? (
                  <div className="animate-in zoom-in-50 duration-300">
                    <Check className="h-4 w-4 text-starknet-teal" />
                  </div>
                ) : (
                  <Circle className="h-4 w-4 opacity-50" />
                )}
              </div>
              <span className={cn(
                "transition-all duration-300 flex-1",
                isCompleted && "font-medium"
              )}>
                {item.label}
              </span>
            </div>
          )
        })}
      </div>

      {/* Completion celebration with enhanced design */}
      {completedCount === totalCount && (
        <div className="mt-5 p-4 bg-gradient-to-r from-starknet-teal/20 to-starknet-purple/20 rounded-xl border border-starknet-teal/30 animate-pulse-glow">
          <div className="flex items-center gap-3">
            <Trophy className="h-5 w-5 text-starknet-teal" />
            <p className="text-sm font-medium">
              🎉 Complete analysis achieved! Ready for the next level.
            </p>
          </div>
        </div>
      )}
    </div>
  )
} 
---

## FILE: frontend/components/smart-suggestions.tsx
"use client"

import { useState, useEffect } from 'react'
import { Card, CardHeader, CardTitle, CardContent } from '@/app/components/ui/card'
import { Button } from '@/app/components/ui/button'
import { AlertCircle, HelpCircle, CheckCircle, ArrowRight } from 'lucide-react'
import { cn } from '@/app/lib/utils'

interface AnalysisResult {
  missing_sections: string[]
  suggested_actions: Array<{
    section: string
    action: string
    priority: 'high' | 'medium' | 'low'
  }>
  help_tooltips: Record<string, string>
  next_steps: string[]
}

interface SmartSuggestionsProps {
  founderId: string
  selectedAgent: string
  onActionClick: (action: string) => void
}

export default function SmartSuggestions({ founderId, selectedAgent, onActionClick }: SmartSuggestionsProps) {
  const [analysis, setAnalysis] = useState<AnalysisResult | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const apiUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'

  useEffect(() => {
    const fetchAnalysis = async () => {
      setIsLoading(true)
      try {
        const response = await fetch(`${apiUrl}/analyze/${founderId}?agent_type=${selectedAgent}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          // No body is needed for this endpoint, but POST is required
        })
        if (response.ok) {
          const data = await response.json()
          setAnalysis(data)
        }
      } catch (error) {
        console.error('Failed to fetch analysis:', error)
      } finally {
        setIsLoading(false)
      }
    }

    if (founderId && founderId !== "anonymous") {
      fetchAnalysis()
    }
  }, [founderId, selectedAgent, apiUrl])

  if (isLoading) {
    return (
      <Card className="mb-4 card-hover bg-gradient-to-br from-background to-secondary/20 border-border/50">
        <CardContent className="p-6">
          <div className="animate-pulse space-y-4">
            <div className="h-4 bg-secondary rounded w-3/4"></div>
            <div className="h-4 bg-secondary rounded w-1/2"></div>
            <div className="h-4 bg-secondary rounded w-2/3"></div>
          </div>
        </CardContent>
      </Card>
    )
  }

  if (!analysis || analysis.suggested_actions.length === 0) return null

  const priorityOrder = { high: 0, medium: 1, low: 2 }
  const sortedActions = analysis.suggested_actions.sort(
    (a, b) => priorityOrder[a.priority] - priorityOrder[b.priority]
  )

  return (
    <Card className="mb-4 card-hover bg-gradient-to-br from-background to-secondary/20 border-border/50">
      <CardHeader>
        <CardTitle className="flex items-center gap-2 text-sm">
          <AlertCircle className="h-4 w-4 text-yellow-500" />
          Smart Suggestions
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-3">
        {analysis.next_steps.length > 0 && (
          <div className="p-3 bg-blue-50 dark:bg-blue-950/30 rounded-lg border border-blue-200 dark:border-blue-800">
            <h4 className="text-sm font-medium text-blue-900 dark:text-blue-100 mb-2">
              Priority Actions
            </h4>
            <div className="space-y-2">
              {analysis.next_steps.map((step, index) => (
                <div key={index} className="text-sm text-blue-700 dark:text-blue-300">
                  {index + 1}. {step}
                </div>
              ))}
            </div>
          </div>
        )}

        {sortedActions.slice(0, 3).map((action, index) => (
          <div
            key={index}
            className={cn(
              "p-3 rounded-lg border-l-4 cursor-pointer hover:bg-secondary/50 transition-colors",
              action.priority === 'high' && "border-red-500 bg-red-50/50 dark:bg-red-950/30",
              action.priority === 'medium' && "border-yellow-500 bg-yellow-50/50 dark:bg-yellow-950/30",
              action.priority === 'low' && "border-blue-500 bg-blue-50/50 dark:bg-blue-950/30"
            )}
            onClick={() => onActionClick(action.action)}
          >
            <div className="flex items-start justify-between">
              <div className="flex-1">
                <div className="flex items-center gap-2 mb-1">
                  <span className={cn(
                    "text-xs px-2 py-1 rounded-full font-medium",
                    action.priority === 'high' && "bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-300",
                    action.priority === 'medium' && "bg-yellow-100 text-yellow-700 dark:bg-yellow-900 dark:text-yellow-300",
                    action.priority === 'low' && "bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300"
                  )}>
                    {action.priority} priority
                  </span>
                  <span className="text-xs text-muted-foreground capitalize">
                    {action.section}
                  </span>
                </div>
                <p className="text-sm">{action.action}</p>
              </div>
              <ArrowRight className="h-4 w-4 text-muted-foreground mt-1" />
            </div>
          </div>
        ))}

        {analysis.help_tooltips && Object.keys(analysis.help_tooltips).length > 0 && (
          <details className="mt-4">
            <summary className="cursor-pointer text-sm font-medium flex items-center gap-2">
              <HelpCircle className="h-4 w-4" />
              Why These Sections Matter
            </summary>
            <div className="mt-2 space-y-2 text-xs text-muted-foreground">
              {Object.entries(analysis.help_tooltips).slice(0, 3).map(([section, help]) => (
                <div key={section} className="p-2 bg-secondary/30 rounded">
                  <strong className="capitalize">{section}:</strong> {help}
                </div>
              ))}
            </div>
          </details>
        )}
      </CardContent>
    </Card>
  )
} 
---

## FILE: frontend/lib/topic-analyzer.ts
/**
 * Analyzes chat messages to determine which rubric items have been covered
 */

interface TopicKeywords {
  [key: string]: string[]
}

const SHARK_VC_KEYWORDS: TopicKeywords = {
  team: ['founder', 'team', 'experience', 'background', 'expertise', 'earned secret', 'why you'],
  market: ['TAM', 'market size', 'total addressable', 'billion', 'market opportunity', 'growth rate'],
  problem: ['problem', 'pain point', 'solution fit', 'customer need', 'workflow', 'broken'],
  traction: ['users', 'revenue', 'growth', 'retention', 'churn', 'MRR', 'ARR', 'customers'],
  economics: ['CAC', 'LTV', 'unit economics', 'payback', 'margin', 'burn rate', 'runway'],
  competition: ['competitors', 'competitive advantage', 'moat', 'differentiation', 'barrier'],
  model: ['business model', 'pricing', 'monetization', 'subscription', 'marketplace', 'SaaS'],
  funding: ['use of funds', 'funding', 'capital', 'milestone', 'budget', 'hire', 'spend'],
  exit: ['exit', 'acquisition', 'IPO', 'acquirer', 'strategic buyer', 'multiple'],
  risks: ['risk', 'challenge', 'threat', 'mitigation', 'what could kill', 'failure'],
}

const PRODUCT_PM_KEYWORDS: TopicKeywords = {
  market: ['market', 'TAM', 'segment', 'customer base', 'growth', 'opportunity'],
  persona: ['user persona', 'JTBD', 'jobs to be done', 'customer profile', 'who is the user'],
  problem: ['problem', 'pain point', 'hair on fire', 'urgent', 'critical', 'need'],
  solution: ['solution', 'feature', 'unique', 'differentiation', '10x better', 'alternative'],
  roadmap: ['roadmap', 'prioritization', 'RICE', 'next feature', 'timeline', 'milestone'],
  metrics: ['metric', 'KPI', 'north star', 'success', 'measure', 'analytics', 'tracking'],
  mvp: ['MVP', 'MLP', 'minimum viable', 'minimum lovable', 'iteration', 'evolution'],
  narrative: ['story', 'narrative', 'press release', 'vision', 'pitch', 'messaging'],
  experiments: ['experiment', 'test', 'hypothesis', 'learning', 'validation', 'A/B test'],
}

export function analyzeCompletedTopics(
  messages: Array<{ role: string; content: string }>,
  agentType: string
): string[] {
  const keywords = agentType === 'Product PM' ? PRODUCT_PM_KEYWORDS : SHARK_VC_KEYWORDS
  const completedTopics = new Set<string>()
  
  // Only analyze assistant messages (the bot's responses)
  const assistantMessages = messages
    .filter(m => m.role === 'assistant')
    .map(m => m.content.toLowerCase())
    .join(' ')

  // Check each topic to see if it's been discussed
  Object.entries(keywords).forEach(([topicId, topicKeywords]) => {
    const isDiscussed = topicKeywords.some(keyword => 
      assistantMessages.includes(keyword.toLowerCase())
    )
    
    if (isDiscussed) {
      // Additional check: topic should be discussed substantively (not just mentioned)
      const topicMentions = topicKeywords.filter(keyword => 
        assistantMessages.includes(keyword.toLowerCase())
      ).length
      
      // Consider topic covered if multiple keywords are mentioned or discussed at length
      if (topicMentions >= 2 || (topicKeywords[0] && assistantMessages.split(topicKeywords[0]).length > 2)) {
        completedTopics.add(topicId)
      }
    }
  })

  return Array.from(completedTopics)
} 
---

## FILE: frontend/lib/supabase.ts
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

// Verification logging for debugging
console.log('Supabase URL:', supabaseUrl ? 'Set' : 'Missing')
console.log('Supabase Anon Key:', supabaseAnonKey ? 'Set' : 'Missing')

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('Missing required Supabase environment variables')
  console.error('Please check your .env.local file has:')
  console.error('- NEXT_PUBLIC_SUPABASE_URL')
  console.error('- NEXT_PUBLIC_SUPABASE_ANON_KEY')
}

export const supabase = createClient(
  supabaseUrl || 'placeholder-url', 
  supabaseAnonKey || 'placeholder-key'
)

// Types for our tables
export interface ChatMessage {
  id?: number
  founder_id: string
  agent_type: string
  role: 'user' | 'assistant'
  content: string
  created_at?: string
}

export interface ChatSession {
  id?: number
  founder_id: string
  agent_type: string
  started_at?: string
}

export interface Feedback {
  id?: number
  founder_id: string
  content: string
  rating?: number
  agent_type?: string
  created_at?: string
} 
---

## FILE: frontend/postcss.config.js
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

---

## FILE: frontend/app/globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 217.2 91.2% 59.8%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 224.3 76.3% 48%;
    --radius: 0.5rem;
    
    /* Add Starknet brand colors */
    --starknet-teal: 180 100% 50%;
    --starknet-purple: 270 100% 65%;
    --starknet-orange: 30 100% 60%;
    
    /* Enhanced gradients */
    --gradient-primary: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--starknet-teal)));
    --gradient-accent: linear-gradient(135deg, hsl(var(--starknet-purple)), hsl(var(--starknet-orange)));
    
    /* Chat bubbles */
    --chat-user: 217.2 91.2% 59.8%;
    --chat-assistant: 217.2 32.6% 17.5%;
    
    /* Typography scale */
    --text-xs: 0.75rem;   /* 12px */
    --text-sm: 0.875rem;  /* 14px */
    --text-base: 1rem;    /* 16px */
    --text-lg: 1.125rem;  /* 18px */
    --text-xl: 1.25rem;   /* 20px */
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

/* Custom animations */
@keyframes gradient {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}

.animate-gradient {
  background-size: 400% 400%;
  animation: gradient 15s ease infinite;
}

/* Scrollbar styling */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  @apply bg-secondary;
  border-radius: 4px;
}

::-webkit-scrollbar-thumb {
  @apply bg-primary/20;
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  @apply bg-primary/30;
}

/* Message animations */
.message-enter {
  animation: message-enter 0.3s ease-out;
}

@keyframes message-enter {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Progress indicator animations */
@keyframes check-mark {
  0% {
    transform: scale(0) rotate(-45deg);
    opacity: 0;
  }
  50% {
    transform: scale(1.2) rotate(-45deg);
  }
  100% {
    transform: scale(1) rotate(0deg);
    opacity: 1;
  }
}

.animate-check {
  animation: check-mark 0.3s ease-out;
}

/* Progress bar fill animation */
@keyframes progress-fill {
  from {
    transform: scaleX(0);
    transform-origin: left;
  }
  to {
    transform: scaleX(1);
    transform-origin: left;
  }
}

.animate-progress {
  animation: progress-fill 0.5s ease-out;
}

/* Celebration animation */
@keyframes celebration {
  0%, 100% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
}

.animate-celebration {
  animation: celebration 0.5s ease-in-out;
}

/* Enhanced animations */
@keyframes slide-up {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes pulse-glow {
  0%, 100% {
    box-shadow: 0 0 0 0 rgba(0, 255, 255, 0.4);
  }
  50% {
    box-shadow: 0 0 20px 10px rgba(0, 255, 255, 0.2);
  }
}

.animate-slide-up {
  animation: slide-up 0.4s ease-out;
}

.animate-pulse-glow {
  animation: pulse-glow 2s ease-in-out infinite;
}

/* Card hover effects */
.card-hover {
  transition: all 0.3s ease;
}

.card-hover:hover {
  transform: translateY(-2px);
  box-shadow: 0 10px 30px -10px rgba(0, 255, 255, 0.3);
}

/* Starknet button variant */
.btn-starknet {
  background: linear-gradient(135deg, hsl(var(--starknet-teal)), hsl(var(--starknet-purple)));
  color: white;
  transition: all 0.3s ease;
}

.btn-starknet:hover {
  transform: scale(1.05);
  box-shadow: 0 5px 20px rgba(0, 255, 255, 0.4);
}
---

